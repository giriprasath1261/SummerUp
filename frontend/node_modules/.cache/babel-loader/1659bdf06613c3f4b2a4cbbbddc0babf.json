{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Slide = require('@material-ui/core/Slide');\n\nvar _Slide2 = _interopRequireDefault(_Slide);\n\nvar _SnackbarContext = require('./SnackbarContext');\n\nvar _SnackbarContext2 = _interopRequireDefault(_SnackbarContext);\n\nvar _constants = require('./utils/constants');\n\nvar _SnackbarItem = require('./SnackbarItem');\n\nvar _SnackbarItem2 = _interopRequireDefault(_SnackbarItem);\n\nvar _warning = require('./utils/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar SnackbarProvider = function (_Component) {\n  _inherits(SnackbarProvider, _Component);\n\n  function SnackbarProvider(props) {\n    _classCallCheck(this, SnackbarProvider);\n\n    var _this = _possibleConstructorReturn(this, (SnackbarProvider.__proto__ || Object.getPrototypeOf(SnackbarProvider)).call(this, props));\n\n    _this.queue = [];\n\n    _this.handleEnqueueSnackbar = function (message) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var key = _ref.key,\n          preventDuplicate = _ref.preventDuplicate,\n          options = _objectWithoutProperties(_ref, ['key', 'preventDuplicate']);\n\n      if (preventDuplicate || _this.props.preventDuplicate) {\n        var inQueue = _this.queue.findIndex(function (item) {\n          return item.message === message;\n        }) > -1;\n        var inView = _this.state.snacks.findIndex(function (item) {\n          return item.message === message;\n        }) > -1;\n\n        if (inQueue || inView) {\n          return null;\n        }\n      }\n\n      var id = key || new Date().getTime() + Math.random();\n\n      var snack = _extends({\n        key: id,\n        message: message\n      }, options, {\n        open: true\n      });\n\n      if (options.persist) {\n        snack.autoHideDuration = undefined;\n      }\n\n      _this.queue.push(snack);\n\n      _this.handleDisplaySnack();\n\n      return id;\n    };\n\n    _this.handleDisplaySnack = function () {\n      var maxSnack = _this.props.maxSnack;\n      var snacks = _this.state.snacks;\n\n      if (snacks.length >= maxSnack) {\n        return _this.handleDismissOldest();\n      }\n\n      return _this.processQueue();\n    };\n\n    _this.processQueue = function () {\n      if (_this.queue.length > 0) {\n        var newOne = _this.queue.shift();\n\n        _this.setState(function (_ref2) {\n          var snacks = _ref2.snacks;\n          return {\n            snacks: [].concat(_toConsumableArray(snacks), [newOne])\n          };\n        });\n      }\n    };\n\n    _this.handleDismissOldest = function () {\n      var popped = false;\n      var ignore = false;\n\n      var persistentCount = _this.state.snacks.reduce(function (acc, current) {\n        return acc + (current.open && current.persist ? 1 : 0);\n      }, 0);\n\n      if (persistentCount === _this.props.maxSnack) {\n        (0, _warning2.default)(_constants.MESSAGES.NO_PERSIST_ALL);\n        ignore = true;\n      }\n\n      _this.setState(function (_ref3) {\n        var snacks = _ref3.snacks;\n        return {\n          snacks: snacks.filter(function (item) {\n            return item.open === true;\n          }).map(function (item) {\n            if (!popped && (!item.persist || ignore)) {\n              popped = true;\n              if (item.onClose) item.onClose(null, 'maxsnack', item.key);\n              if (_this.props.onClose) _this.props.onClose(null, 'maxsnack', item.key);\n              return _extends({}, item, {\n                open: false\n              });\n            }\n\n            return _extends({}, item);\n          })\n        };\n      });\n    };\n\n    _this.handleCloseSnack = function (event, reason, key) {\n      _this.setState(function (_ref4) {\n        var snacks = _ref4.snacks;\n        return {\n          snacks: snacks.map(function (item) {\n            return !key || item.key === key ? _extends({}, item, {\n              open: false\n            }) : _extends({}, item);\n          })\n        };\n      });\n\n      if (_this.props.onClose) _this.props.onClose(event, reason, key);\n    };\n\n    _this.handleDismissSnack = function (key) {\n      _this.handleCloseSnack(null, null, key);\n    };\n\n    _this.handleExitedSnack = function (event, key) {\n      var enterDelay = _constants.TRANSITION_DELAY + _constants.TRANSITION_DOWN_DURATION + 40;\n\n      _this.setState(function (_ref5) {\n        var snacks = _ref5.snacks;\n        return {\n          snacks: snacks.filter(function (item) {\n            return item.key !== key;\n          })\n        };\n      }, function () {\n        return setTimeout(_this.handleDisplaySnack, enterDelay);\n      });\n\n      if (_this.props.onExited) _this.props.onExited(event, key);\n    };\n\n    _this.handleSetHeight = function (key, height) {\n      _this.setState(function (_ref6) {\n        var snacks = _ref6.snacks;\n        return {\n          snacks: snacks.map(function (item) {\n            return item.key === key ? _extends({}, item, {\n              height: height\n            }) : _extends({}, item);\n          })\n        };\n      });\n    };\n\n    _this.state = {\n      snacks: [],\n      contextValue: {\n        handleEnqueueSnackbar: _this.handleEnqueueSnackbar,\n        handleCloseSnackbar: _this.handleDismissSnack\n      }\n    };\n    return _this;\n  }\n\n  _createClass(SnackbarProvider, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          children = _props.children,\n          maxSnack = _props.maxSnack,\n          dense = _props.dense,\n          props = _objectWithoutProperties(_props, ['children', 'maxSnack', 'dense']);\n\n      var _state = this.state,\n          contextValue = _state.contextValue,\n          snacks = _state.snacks;\n      return _react2.default.createElement(_SnackbarContext2.default.Provider, {\n        value: contextValue\n      }, children, snacks.map(function (snack, index) {\n        return _react2.default.createElement(_SnackbarItem2.default, _extends({}, props, {\n          key: snack.key,\n          snack: snack,\n          offset: _this2.offsets[index],\n          iconVariant: Object.assign(_constants.iconVariant, _this2.props.iconVariant),\n          onClose: _this2.handleCloseSnack,\n          onExited: _this2.handleExitedSnack,\n          onSetHeight: _this2.handleSetHeight\n        }));\n      }));\n    }\n  }, {\n    key: 'offsets',\n    get: function get() {\n      var _this3 = this;\n\n      var snacks = this.state.snacks;\n      return snacks.map(function (item, i) {\n        var index = i;\n\n        var _ref7 = _this3.props.dense ? {\n          view: 0,\n          snackbar: 4\n        } : {\n          view: 20,\n          snackbar: 12\n        },\n            viewOffset = _ref7.view,\n            snackbarOffset = _ref7.snackbar;\n\n        var offset = viewOffset;\n\n        while (snacks[index - 1]) {\n          var snackHeight = snacks[index - 1].height || 48;\n          offset += snackHeight + snackbarOffset;\n          index -= 1;\n        }\n\n        return offset;\n      });\n    }\n    /**\n     * Adds a new snackbar to the queue to be presented.\n     * @param {string} message - text of the notification\n     * @param {object} options - additional options for the snackbar we want to enqueue.\n     * We can pass Material-ui Snackbar props for individual customisation.\n     * @param {string} options.key\n     * @param {string} options.variant - type of the snackbar. default value is 'default'.\n     * can be: (default, success, error, warning, info)\n     * @param {bool} options.persist\n     * @param {bool} options.preventDuplicate\n     * @returns generated or user defined key referencing the new snackbar or null\n     */\n\n    /**\n     * Display snack if there's space for it. Otherwise, immediately begin dismissing the\n     * oldest message to start showing the new one.\n     */\n\n    /**\n     * Display items (notifications) in the queue if there's space for them.\n     */\n\n    /**\n     * Hide oldest snackbar on the screen because there exists a new one which we have to display.\n     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).\n     */\n\n    /**\n     * Hide a snackbar after its timeout.\n     * @param {object} event - The event source of the callback\n     * @param {string} reason - can be timeout or clickaway\n     * @param {number} key - id of the snackbar we want to hide\n     */\n\n    /**\n     * Close snackbar with the given key\n     * @param {number} key - id of the snackbar we want to hide\n     */\n\n    /**\n     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),\n     * it leaves the screen and immediately after leaving animation is done, this method\n     * gets called. We remove the hidden snackbar from state and then display notifications\n     * waiting in the queue (if any).\n     * @param {number} key - id of the snackbar we want to remove\n     * @param {object} event - The event source of the callback\n     */\n\n    /**\n     * Sets height for a given snackbar\n     * @param {number} height - height of snackbar after it's been rendered\n     * @param {number} key - id of the snackbar we want to remove\n     */\n\n  }]);\n\n  return SnackbarProvider;\n}(_react.Component);\n\nSnackbarProvider.propTypes = {\n  /**\n   * Most of the time, this is your App. every component from this point onward\n   * will be able to show snackbars.\n   */\n  children: _propTypes2.default.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: _propTypes2.default.object,\n\n  /**\n   * Maximum snackbars that can be stacked on top of one another.\n   */\n  maxSnack: _propTypes2.default.number,\n\n  /**\n   * Denser margins for snackbars. Recommended to be used on mobile devices\n   */\n  dense: _propTypes2.default.bool,\n\n  /**\n   * Ignores displaying multiple snackbars with the same `message`\n   */\n  preventDuplicate: _propTypes2.default.bool,\n\n  /**\n   * Hides iconVariant if set to `true`.\n   */\n  hideIconVariant: _propTypes2.default.bool,\n\n  /**\n   * Little icon that is displayed at left corner of a snackbar.\n   */\n  iconVariant: _propTypes2.default.shape({\n    /**\n     * Icon displayed when variant of a snackbar is set to `success`.\n     */\n    success: _propTypes2.default.any,\n\n    /**\n     * Icon displayed when variant of a snackbar is set to `warning`.\n     */\n    warning: _propTypes2.default.any,\n\n    /**\n     * Icon displayed when variant of a snackbar is set to `error`.\n     */\n    error: _propTypes2.default.any,\n\n    /**\n     * Icon displayed when variant of a snackbar is set to `info`.\n     */\n    info: _propTypes2.default.any\n  }),\n\n  /**\n   * Callback to get action(s). actions are mostly buttons displayed in Snackbar.\n   * @param {string|number} key key of a snackbar\n   */\n  action: _propTypes2.default.func,\n\n  /**\n   * The anchor of the `Snackbar`.\n   */\n  anchorOrigin: _propTypes2.default.shape({\n    horizontal: _propTypes2.default.oneOf(['left', 'center', 'right']).isRequired,\n    vertical: _propTypes2.default.oneOf(['top', 'bottom']).isRequired\n  }),\n\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   */\n  autoHideDuration: _propTypes2.default.number,\n\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   */\n  disableWindowBlurListener: _propTypes2.default.bool,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {object} event The event source of the callback\n   * @param {string} reason Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`\n   *  or: `\"maxsnack\"` (snackbar is closed because `maxSnack` has reached.)\n   * @param {string|number} key key of a Snackbar\n   */\n  onClose: _propTypes2.default.func,\n\n  /**\n   * Callback fired before the transition is entering.\n   */\n  onEnter: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the transition has entered.\n   */\n  onEntered: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the transition is entering.\n   */\n  onEntering: _propTypes2.default.func,\n\n  /**\n   * Callback fired before the transition is exiting.\n   */\n  onExit: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the transition has exited.\n   */\n  onExited: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the transition is exiting.\n   */\n  onExiting: _propTypes2.default.func,\n\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` property isn't specified, it does nothing.\n   * If `autoHideDuration` property is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: _propTypes2.default.number,\n\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: _propTypes2.default.elementType,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({\n    enter: _propTypes2.default.number,\n    exit: _propTypes2.default.number\n  })])\n};\nSnackbarProvider.defaultProps = {\n  maxSnack: 3,\n  dense: false,\n  preventDuplicate: false,\n  hideIconVariant: false,\n  iconVariant: {},\n  anchorOrigin: {\n    vertical: 'bottom',\n    horizontal: 'left'\n  },\n  autoHideDuration: 5000,\n  TransitionComponent: _Slide2.default\n};\nexports.default = SnackbarProvider;","map":null,"metadata":{},"sourceType":"script"}