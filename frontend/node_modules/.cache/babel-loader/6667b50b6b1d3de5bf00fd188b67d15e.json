{"ast":null,"code":"import axios from \"axios\";\nimport localStorageService from \"./localStorageService\";\n\nclass JwtAuthService {\n  constructor() {\n    this.user = {\n      userId: \"1\",\n      role: 'ADMIN',\n      displayName: \"Jason Alexander\",\n      email: \"jasonalexander@gmail.com\",\n      photoURL: \"/assets/images/face-6.jpg\",\n      age: 25,\n      token: \"faslkhfh423oiu4h4kj432rkj23h432u49ufjaklj423h4jkhkjh\"\n    };\n\n    this.loginWithEmailAndPassword = (email, password) => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(this.user);\n        }, 1000);\n      }).then(data => {\n        // Login successful\n        // Save token\n        this.setSession(data.token); // Set user\n\n        this.setUser(data);\n        return data;\n      });\n    };\n\n    this.loginWithToken = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(this.user);\n        }, 100);\n      }).then(data => {\n        // Token is valid\n        this.setSession(data.token);\n        this.setUser(data);\n        return data;\n      });\n    };\n\n    this.logout = () => {\n      this.setSession(null);\n      this.removeUser();\n    };\n\n    this.setSession = token => {\n      if (token) {\n        localStorage.setItem(\"jwt_token\", token);\n        axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n      } else {\n        localStorage.removeItem(\"jwt_token\");\n        delete axios.defaults.headers.common[\"Authorization\"];\n      }\n    };\n\n    this.setUser = user => {\n      localStorageService.setItem(\"auth_user\", user);\n    };\n\n    this.removeUser = () => {\n      localStorage.removeItem(\"auth_user\");\n    };\n  }\n\n}\n\nexport default new JwtAuthService();","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/app/services/jwtAuthService.js"],"names":["axios","localStorageService","JwtAuthService","user","userId","role","displayName","email","photoURL","age","token","loginWithEmailAndPassword","password","Promise","resolve","reject","setTimeout","then","data","setSession","setUser","loginWithToken","logout","removeUser","localStorage","setItem","defaults","headers","common","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,MAAMC,cAAN,CAAqB;AAAA;AAAA,SAGnBC,IAHmB,GAGZ;AACLC,MAAAA,MAAM,EAAE,GADH;AAELC,MAAAA,IAAI,EAAE,OAFD;AAGLC,MAAAA,WAAW,EAAE,iBAHR;AAILC,MAAAA,KAAK,EAAE,0BAJF;AAKLC,MAAAA,QAAQ,EAAE,2BALL;AAMLC,MAAAA,GAAG,EAAE,EANA;AAOLC,MAAAA,KAAK,EAAE;AAPF,KAHY;;AAAA,SAiBnBC,yBAjBmB,GAiBS,CAACJ,KAAD,EAAQK,QAAR,KAAqB;AAC/C,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,QAAAA,UAAU,CAAC,MAAM;AACfF,UAAAA,OAAO,CAAC,KAAKX,IAAN,CAAP;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OAJM,EAIJc,IAJI,CAICC,IAAI,IAAI;AACd;AACA;AACA,aAAKC,UAAL,CAAgBD,IAAI,CAACR,KAArB,EAHc,CAId;;AACA,aAAKU,OAAL,CAAaF,IAAb;AACA,eAAOA,IAAP;AACD,OAXM,CAAP;AAYD,KA9BkB;;AAAA,SAkCnBG,cAlCmB,GAkCF,MAAM;AACrB,aAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,QAAAA,UAAU,CAAC,MAAM;AACfF,UAAAA,OAAO,CAAC,KAAKX,IAAN,CAAP;AACD,SAFS,EAEP,GAFO,CAAV;AAGD,OAJM,EAIJc,IAJI,CAICC,IAAI,IAAI;AACd;AACA,aAAKC,UAAL,CAAgBD,IAAI,CAACR,KAArB;AACA,aAAKU,OAAL,CAAaF,IAAb;AACA,eAAOA,IAAP;AACD,OATM,CAAP;AAUD,KA7CkB;;AAAA,SA+CnBI,MA/CmB,GA+CV,MAAM;AACb,WAAKH,UAAL,CAAgB,IAAhB;AACA,WAAKI,UAAL;AACD,KAlDkB;;AAAA,SAqDnBJ,UArDmB,GAqDNT,KAAK,IAAI;AACpB,UAAIA,KAAJ,EAAW;AACTc,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCf,KAAlC;AACAV,QAAAA,KAAK,CAAC0B,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,YAAYlB,KAA7D;AACD,OAHD,MAGO;AACLc,QAAAA,YAAY,CAACK,UAAb,CAAwB,WAAxB;AACA,eAAO7B,KAAK,CAAC0B,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACD;AACF,KA7DkB;;AAAA,SAgEnBR,OAhEmB,GAgERjB,IAAD,IAAU;AAClBF,MAAAA,mBAAmB,CAACwB,OAApB,CAA4B,WAA5B,EAAyCtB,IAAzC;AACD,KAlEkB;;AAAA,SAoEnBoB,UApEmB,GAoEN,MAAM;AACjBC,MAAAA,YAAY,CAACK,UAAb,CAAwB,WAAxB;AACD,KAtEkB;AAAA;;AAAA;;AAyErB,eAAe,IAAI3B,cAAJ,EAAf","sourcesContent":["import axios from \"axios\";\nimport localStorageService from \"./localStorageService\";\n\nclass JwtAuthService {\n\n  // Dummy user object just for the demo\n  user = {\n    userId: \"1\",\n    role: 'ADMIN',\n    displayName: \"Jason Alexander\",\n    email: \"jasonalexander@gmail.com\",\n    photoURL: \"/assets/images/face-6.jpg\",\n    age: 25,\n    token: \"faslkhfh423oiu4h4kj432rkj23h432u49ufjaklj423h4jkhkjh\"\n  }\n\n  // You need to send http request with email and passsword to your server in this method\n  // Your server will return user object & a Token\n  // User should have role property\n  // You can define roles in app/auth/authRoles.js\n  loginWithEmailAndPassword = (email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(this.user);\n      }, 1000);\n    }).then(data => {\n      // Login successful\n      // Save token\n      this.setSession(data.token);\n      // Set user\n      this.setUser(data);\n      return data;\n    });\n  };\n\n  // You need to send http requst with existing token to your server to check token is valid\n  // This method is being used when user logged in & app is reloaded\n  loginWithToken = () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(this.user);\n      }, 100);\n    }).then(data => {\n      // Token is valid\n      this.setSession(data.token);\n      this.setUser(data);\n      return data;\n    });\n  };\n\n  logout = () => {\n    this.setSession(null);\n    this.removeUser();\n  }\n\n  // Set token to all http request header, so you don't need to attach everytime\n  setSession = token => {\n    if (token) {\n      localStorage.setItem(\"jwt_token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n    } else {\n      localStorage.removeItem(\"jwt_token\");\n      delete axios.defaults.headers.common[\"Authorization\"];\n    }\n  };\n\n  // Save user to localstorage\n  setUser = (user) => {    \n    localStorageService.setItem(\"auth_user\", user);\n  }\n  // Remove user from localstorage\n  removeUser = () => {\n    localStorage.removeItem(\"auth_user\");\n  }\n}\n\nexport default new JwtAuthService();\n"]},"metadata":{},"sourceType":"module"}