{"ast":null,"code":"import _slicedToArray from \"/home/giriprasath/Downloads/matx-react/matx-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/giriprasath/Downloads/matx-react/matx-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/giriprasath/Downloads/matx-react/matx-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/giriprasath/Downloads/matx-react/matx-react/src/app/views/material-kit/auto-complete/Downshift.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport deburr from \"lodash/deburr\";\nimport Downshift from \"downshift\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Popper from \"@material-ui/core/Popper\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Chip from \"@material-ui/core/Chip\";\nconst suggestions = [{\n  label: \"Afghanistan\"\n}, {\n  label: \"Aland Islands\"\n}, {\n  label: \"Albania\"\n}, {\n  label: \"Algeria\"\n}, {\n  label: \"American Samoa\"\n}, {\n  label: \"Andorra\"\n}, {\n  label: \"Angola\"\n}, {\n  label: \"Anguilla\"\n}, {\n  label: \"Antarctica\"\n}, {\n  label: \"Antigua and Barbuda\"\n}, {\n  label: \"Argentina\"\n}, {\n  label: \"Armenia\"\n}, {\n  label: \"Aruba\"\n}, {\n  label: \"Australia\"\n}, {\n  label: \"Austria\"\n}, {\n  label: \"Azerbaijan\"\n}, {\n  label: \"Bahamas\"\n}, {\n  label: \"Bahrain\"\n}, {\n  label: \"Bangladesh\"\n}, {\n  label: \"Barbados\"\n}, {\n  label: \"Belarus\"\n}, {\n  label: \"Belgium\"\n}, {\n  label: \"Belize\"\n}, {\n  label: \"Benin\"\n}, {\n  label: \"Bermuda\"\n}, {\n  label: \"Bhutan\"\n}, {\n  label: \"Bolivia, Plurinational State of\"\n}, {\n  label: \"Bonaire, Sint Eustatius and Saba\"\n}, {\n  label: \"Bosnia and Herzegovina\"\n}, {\n  label: \"Botswana\"\n}, {\n  label: \"Bouvet Island\"\n}, {\n  label: \"Brazil\"\n}, {\n  label: \"British Indian Ocean Territory\"\n}, {\n  label: \"Brunei Darussalam\"\n}];\n\nfunction renderInput(inputProps) {\n  const InputProps = inputProps.InputProps,\n        classes = inputProps.classes,\n        ref = inputProps.ref,\n        other = _objectWithoutProperties(inputProps, [\"InputProps\", \"classes\", \"ref\"]);\n\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({\n    InputProps: _objectSpread({\n      inputRef: ref,\n      classes: {\n        root: classes.inputRoot,\n        input: classes.inputInput\n      }\n    }, InputProps)\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }));\n}\n\nfunction renderSuggestion(suggestionProps) {\n  const suggestion = suggestionProps.suggestion,\n        index = suggestionProps.index,\n        itemProps = suggestionProps.itemProps,\n        highlightedIndex = suggestionProps.highlightedIndex,\n        selectedItem = suggestionProps.selectedItem;\n  const isHighlighted = highlightedIndex === index;\n  const isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\n  return /*#__PURE__*/React.createElement(MenuItem, Object.assign({}, itemProps, {\n    key: suggestion.label,\n    selected: isHighlighted,\n    component: \"div\",\n    style: {\n      fontWeight: isSelected ? 500 : 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }), suggestion.label);\n}\n\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({\n    label: PropTypes.string\n  }).isRequired\n};\n\nfunction getSuggestions(value, {\n  showEmpty = false\n} = {}) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 && !showEmpty ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction DownshiftMultiple(props) {\n  const classes = props.classes;\n\n  const _React$useState = React.useState(\"\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        inputValue = _React$useState2[0],\n        setInputValue = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedItem = _React$useState4[0],\n        setSelectedItem = _React$useState4[1];\n\n  function handleKeyDown(event) {\n    if (selectedItem.length && !inputValue.length && event.key === \"Backspace\") {\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n    }\n  }\n\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  function handleChange(item) {\n    let newSelectedItem = [...selectedItem];\n\n    if (newSelectedItem.indexOf(item) === -1) {\n      newSelectedItem = [...newSelectedItem, item];\n    }\n\n    setInputValue(\"\");\n    setSelectedItem(newSelectedItem);\n  }\n\n  const handleDelete = item => () => {\n    const newSelectedItem = [...selectedItem];\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n    setSelectedItem(newSelectedItem);\n  };\n\n  return /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-multiple\",\n    inputValue: inputValue,\n    onChange: handleChange,\n    selectedItem: selectedItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, ({\n    getInputProps,\n    getItemProps,\n    getLabelProps,\n    isOpen,\n    inputValue: inputValue2,\n    selectedItem: selectedItem2,\n    highlightedIndex\n  }) => {\n    const _getInputProps = getInputProps({\n      onKeyDown: handleKeyDown,\n      placeholder: \"Select multiple countries\"\n    }),\n          onBlur = _getInputProps.onBlur,\n          _onChange = _getInputProps.onChange,\n          onFocus = _getInputProps.onFocus,\n          inputProps = _objectWithoutProperties(_getInputProps, [\"onBlur\", \"onChange\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes,\n      label: \"Countries\",\n      InputLabelProps: getLabelProps(),\n      InputProps: {\n        startAdornment: selectedItem.map(item => /*#__PURE__*/React.createElement(Chip, {\n          key: item,\n          tabIndex: -1,\n          label: item,\n          className: classes.chip,\n          onDelete: handleDelete(item),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 19\n          }\n        })),\n        onBlur,\n        onChange: event => {\n          handleInputChange(event);\n\n          _onChange(event);\n        },\n        onFocus\n      },\n      inputProps\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 15\n      }\n    }, getSuggestions(inputValue2).map((suggestion, index) => renderSuggestion({\n      suggestion,\n      index,\n      itemProps: getItemProps({\n        item: suggestion.label\n      }),\n      highlightedIndex,\n      selectedItem: selectedItem2\n    }))) : null);\n  });\n}\n\nDownshiftMultiple.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250\n  },\n  container: {\n    flexGrow: 1,\n    position: \"relative\"\n  },\n  paper: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25)\n  },\n  inputRoot: {\n    flexWrap: \"wrap\"\n  },\n  inputInput: {\n    width: \"auto\",\n    flexGrow: 1\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\nlet popperNode;\nexport default function IntegrationDownshift() {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, ({\n    getInputProps,\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    selectedItem\n  }) => {\n    const _getInputProps2 = getInputProps({\n      placeholder: \"Search for a country (start with a)\"\n    }),\n          onBlur = _getInputProps2.onBlur,\n          onFocus = _getInputProps2.onFocus,\n          inputProps = _objectWithoutProperties(_getInputProps2, [\"onBlur\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes,\n      label: \"Country\",\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      InputProps: {\n        onBlur,\n        onFocus\n      },\n      inputProps\n    }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 15\n      }\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 19\n      }\n    }, getSuggestions(inputValue).map((suggestion, index) => renderSuggestion({\n      suggestion,\n      index,\n      itemProps: getItemProps({\n        item: suggestion.label\n      }),\n      highlightedIndex,\n      selectedItem\n    }))) : null));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DownshiftMultiple, {\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-popper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }\n  }, ({\n    getInputProps,\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    selectedItem\n  }) => {\n    const _getInputProps3 = getInputProps({\n      placeholder: \"With Popper\"\n    }),\n          onBlur = _getInputProps3.onBlur,\n          onFocus = _getInputProps3.onFocus,\n          inputProps = _objectWithoutProperties(_getInputProps3, [\"onBlur\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes,\n      label: \"Country\",\n      InputProps: {\n        onBlur,\n        onFocus\n      },\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      inputProps,\n      ref: node => {\n        popperNode = node;\n      }\n    }), /*#__PURE__*/React.createElement(Popper, {\n      open: isOpen,\n      anchorEl: popperNode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, isOpen ? getMenuProps({}, {\n      suppressRefError: true\n    }) : {}, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Paper, {\n      square: true,\n      style: {\n        marginTop: 8,\n        width: popperNode ? popperNode.clientWidth : undefined\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 19\n      }\n    }, getSuggestions(inputValue).map((suggestion, index) => renderSuggestion({\n      suggestion,\n      index,\n      itemProps: getItemProps({\n        item: suggestion.label\n      }),\n      highlightedIndex,\n      selectedItem\n    }))))));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }\n  }, ({\n    clearSelection,\n    getInputProps,\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    openMenu,\n    selectedItem\n  }) => {\n    const _getInputProps4 = getInputProps({\n      onChange: event => {\n        if (event.target.value === \"\") {\n          clearSelection();\n        }\n      },\n      onFocus: openMenu,\n      placeholder: \"With the clear & show empty options\"\n    }),\n          onBlur = _getInputProps4.onBlur,\n          onChange = _getInputProps4.onChange,\n          onFocus = _getInputProps4.onFocus,\n          inputProps = _objectWithoutProperties(_getInputProps4, [\"onBlur\", \"onChange\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 13\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes,\n      label: \"Countries\",\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      InputProps: {\n        onBlur,\n        onChange,\n        onFocus\n      },\n      inputProps\n    }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 15\n      }\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 19\n      }\n    }, getSuggestions(inputValue, {\n      showEmpty: true\n    }).map((suggestion, index) => renderSuggestion({\n      suggestion,\n      index,\n      itemProps: getItemProps({\n        item: suggestion.label\n      }),\n      highlightedIndex,\n      selectedItem\n    }))) : null));\n  }));\n}","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/app/views/material-kit/auto-complete/Downshift.jsx"],"names":["React","PropTypes","deburr","Downshift","makeStyles","TextField","Popper","Paper","MenuItem","Chip","suggestions","label","renderInput","inputProps","InputProps","classes","ref","other","inputRef","root","inputRoot","input","inputInput","renderSuggestion","suggestionProps","suggestion","index","itemProps","highlightedIndex","selectedItem","isHighlighted","isSelected","indexOf","fontWeight","propTypes","number","object","string","shape","isRequired","getSuggestions","value","showEmpty","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","DownshiftMultiple","props","useState","setInputValue","setSelectedItem","handleKeyDown","event","key","handleInputChange","target","handleChange","item","newSelectedItem","handleDelete","splice","getInputProps","getItemProps","getLabelProps","isOpen","inputValue2","selectedItem2","onKeyDown","placeholder","onBlur","onChange","onFocus","container","fullWidth","InputLabelProps","startAdornment","map","chip","paper","useStyles","theme","flexGrow","height","position","zIndex","marginTop","spacing","left","right","margin","flexWrap","width","divider","popperNode","IntegrationDownshift","getMenuProps","shrink","node","suppressRefError","clientWidth","undefined","clearSelection","openMenu"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport deburr from \"lodash/deburr\";\nimport Downshift from \"downshift\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Popper from \"@material-ui/core/Popper\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst suggestions = [\n  { label: \"Afghanistan\" },\n  { label: \"Aland Islands\" },\n  { label: \"Albania\" },\n  { label: \"Algeria\" },\n  { label: \"American Samoa\" },\n  { label: \"Andorra\" },\n  { label: \"Angola\" },\n  { label: \"Anguilla\" },\n  { label: \"Antarctica\" },\n  { label: \"Antigua and Barbuda\" },\n  { label: \"Argentina\" },\n  { label: \"Armenia\" },\n  { label: \"Aruba\" },\n  { label: \"Australia\" },\n  { label: \"Austria\" },\n  { label: \"Azerbaijan\" },\n  { label: \"Bahamas\" },\n  { label: \"Bahrain\" },\n  { label: \"Bangladesh\" },\n  { label: \"Barbados\" },\n  { label: \"Belarus\" },\n  { label: \"Belgium\" },\n  { label: \"Belize\" },\n  { label: \"Benin\" },\n  { label: \"Bermuda\" },\n  { label: \"Bhutan\" },\n  { label: \"Bolivia, Plurinational State of\" },\n  { label: \"Bonaire, Sint Eustatius and Saba\" },\n  { label: \"Bosnia and Herzegovina\" },\n  { label: \"Botswana\" },\n  { label: \"Bouvet Island\" },\n  { label: \"Brazil\" },\n  { label: \"British Indian Ocean Territory\" },\n  { label: \"Brunei Darussalam\" }\n];\n\nfunction renderInput(inputProps) {\n  const { InputProps, classes, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      InputProps={{\n        inputRef: ref,\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput\n        },\n        ...InputProps\n      }}\n      {...other}\n    />\n  );\n}\n\nfunction renderSuggestion(suggestionProps) {\n  const {\n    suggestion,\n    index,\n    itemProps,\n    highlightedIndex,\n    selectedItem\n  } = suggestionProps;\n  const isHighlighted = highlightedIndex === index;\n  const isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\n\n  return (\n    <MenuItem\n      {...itemProps}\n      key={suggestion.label}\n      selected={isHighlighted}\n      component=\"div\"\n      style={{\n        fontWeight: isSelected ? 500 : 400\n      }}\n    >\n      {suggestion.label}\n    </MenuItem>\n  );\n}\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired\n};\n\nfunction getSuggestions(value, { showEmpty = false } = {}) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0 && !showEmpty\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 &&\n          suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nfunction DownshiftMultiple(props) {\n  const { classes } = props;\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [selectedItem, setSelectedItem] = React.useState([]);\n\n  function handleKeyDown(event) {\n    if (\n      selectedItem.length &&\n      !inputValue.length &&\n      event.key === \"Backspace\"\n    ) {\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n    }\n  }\n\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  function handleChange(item) {\n    let newSelectedItem = [...selectedItem];\n    if (newSelectedItem.indexOf(item) === -1) {\n      newSelectedItem = [...newSelectedItem, item];\n    }\n    setInputValue(\"\");\n    setSelectedItem(newSelectedItem);\n  }\n\n  const handleDelete = item => () => {\n    const newSelectedItem = [...selectedItem];\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n    setSelectedItem(newSelectedItem);\n  };\n\n  return (\n    <Downshift\n      id=\"downshift-multiple\"\n      inputValue={inputValue}\n      onChange={handleChange}\n      selectedItem={selectedItem}\n    >\n      {({\n        getInputProps,\n        getItemProps,\n        getLabelProps,\n        isOpen,\n        inputValue: inputValue2,\n        selectedItem: selectedItem2,\n        highlightedIndex\n      }) => {\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\n          onKeyDown: handleKeyDown,\n          placeholder: \"Select multiple countries\"\n        });\n\n        return (\n          <div className={classes.container}>\n            {renderInput({\n              fullWidth: true,\n              classes,\n              label: \"Countries\",\n              InputLabelProps: getLabelProps(),\n              InputProps: {\n                startAdornment: selectedItem.map(item => (\n                  <Chip\n                    key={item}\n                    tabIndex={-1}\n                    label={item}\n                    className={classes.chip}\n                    onDelete={handleDelete(item)}\n                  />\n                )),\n                onBlur,\n                onChange: event => {\n                  handleInputChange(event);\n                  onChange(event);\n                },\n                onFocus\n              },\n              inputProps\n            })}\n\n            {isOpen ? (\n              <Paper className={classes.paper} square>\n                {getSuggestions(inputValue2).map((suggestion, index) =>\n                  renderSuggestion({\n                    suggestion,\n                    index,\n                    itemProps: getItemProps({ item: suggestion.label }),\n                    highlightedIndex,\n                    selectedItem: selectedItem2\n                  })\n                )}\n              </Paper>\n            ) : null}\n          </div>\n        );\n      }}\n    </Downshift>\n  );\n}\n\nDownshiftMultiple.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250\n  },\n  container: {\n    flexGrow: 1,\n    position: \"relative\"\n  },\n  paper: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25)\n  },\n  inputRoot: {\n    flexWrap: \"wrap\"\n  },\n  inputInput: {\n    width: \"auto\",\n    flexGrow: 1\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\n\nlet popperNode;\n\nexport default function IntegrationDownshift() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Downshift id=\"downshift-simple\">\n        {({\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          selectedItem\n        }) => {\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\n            placeholder: \"Search for a country (start with a)\"\n          });\n\n          return (\n            <div className={classes.container}>\n              {renderInput({\n                fullWidth: true,\n                classes,\n                label: \"Country\",\n                InputLabelProps: getLabelProps({ shrink: true }),\n                InputProps: { onBlur, onFocus },\n                inputProps\n              })}\n\n              <div {...getMenuProps()}>\n                {isOpen ? (\n                  <Paper className={classes.paper} square>\n                    {getSuggestions(inputValue).map((suggestion, index) =>\n                      renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({ item: suggestion.label }),\n                        highlightedIndex,\n                        selectedItem\n                      })\n                    )}\n                  </Paper>\n                ) : null}\n              </div>\n            </div>\n          );\n        }}\n      </Downshift>\n      <div className={classes.divider} />\n      <DownshiftMultiple classes={classes} />\n      <div className={classes.divider} />\n      <Downshift id=\"downshift-popper\">\n        {({\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          selectedItem\n        }) => {\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\n            placeholder: \"With Popper\"\n          });\n\n          return (\n            <div className={classes.container}>\n              {renderInput({\n                fullWidth: true,\n                classes,\n                label: \"Country\",\n                InputProps: { onBlur, onFocus },\n                InputLabelProps: getLabelProps({ shrink: true }),\n                inputProps,\n                ref: node => {\n                  popperNode = node;\n                }\n              })}\n\n              <Popper open={isOpen} anchorEl={popperNode}>\n                <div\n                  {...(isOpen\n                    ? getMenuProps({}, { suppressRefError: true })\n                    : {})}\n                >\n                  <Paper\n                    square\n                    style={{\n                      marginTop: 8,\n                      width: popperNode ? popperNode.clientWidth : undefined\n                    }}\n                  >\n                    {getSuggestions(inputValue).map((suggestion, index) =>\n                      renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({ item: suggestion.label }),\n                        highlightedIndex,\n                        selectedItem\n                      })\n                    )}\n                  </Paper>\n                </div>\n              </Popper>\n            </div>\n          );\n        }}\n      </Downshift>\n      <div className={classes.divider} />\n      <Downshift id=\"downshift-options\">\n        {({\n          clearSelection,\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          openMenu,\n          selectedItem\n        }) => {\n          const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\n            onChange: event => {\n              if (event.target.value === \"\") {\n                clearSelection();\n              }\n            },\n            onFocus: openMenu,\n            placeholder: \"With the clear & show empty options\"\n          });\n\n          return (\n            <div className={classes.container}>\n              {renderInput({\n                fullWidth: true,\n                classes,\n                label: \"Countries\",\n                InputLabelProps: getLabelProps({ shrink: true }),\n                InputProps: { onBlur, onChange, onFocus },\n                inputProps\n              })}\n\n              <div {...getMenuProps()}>\n                {isOpen ? (\n                  <Paper className={classes.paper} square>\n                    {getSuggestions(inputValue, { showEmpty: true }).map(\n                      (suggestion, index) =>\n                        renderSuggestion({\n                          suggestion,\n                          index,\n                          itemProps: getItemProps({ item: suggestion.label }),\n                          highlightedIndex,\n                          selectedItem\n                        })\n                    )}\n                  </Paper>\n                ) : null}\n              </div>\n            </div>\n          );\n        }}\n      </Downshift>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}