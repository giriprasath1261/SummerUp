{"ast":null,"code":"/**\n * @name InfoBox\n * @version 1.1.13 [March 19, 2014]\n * @author Gary Little (inspired by proof-of-concept code from Pamela Fox of Google)\n * @copyright Copyright 2010 Gary Little [gary at luxcentral.com]\n * @fileoverview InfoBox extends the Google Maps JavaScript API V3 <tt>OverlayView</tt> class.\n *  <p>\n *  An InfoBox behaves like a <tt>google.maps.InfoWindow</tt>, but it supports several\n *  additional properties for advanced styling. An InfoBox can also be used as a map label.\n *  <p>\n *  An InfoBox also fires the same events as a <tt>google.maps.InfoWindow</tt>.\n */\n\n/*!\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browser:true */\n\n/*global google */\n\n/**\n * @name InfoBoxOptions\n * @class This class represents the optional parameter passed to the {@link InfoBox} constructor.\n * @property {string|Node} content The content of the InfoBox (plain text or an HTML DOM node).\n * @property {boolean} [disableAutoPan=false] Disable auto-pan on <tt>open</tt>.\n * @property {number} maxWidth The maximum width (in pixels) of the InfoBox. Set to 0 if no maximum.\n * @property {Size} pixelOffset The offset (in pixels) from the top left corner of the InfoBox\n *  (or the bottom left corner if the <code>alignBottom</code> property is <code>true</code>)\n *  to the map pixel corresponding to <tt>position</tt>.\n * @property {LatLng} position The geographic location at which to display the InfoBox.\n * @property {number} zIndex The CSS z-index style value for the InfoBox.\n *  Note: This value overrides a zIndex setting specified in the <tt>boxStyle</tt> property.\n * @property {string} [boxClass=\"infoBox\"] The name of the CSS class defining the styles for the InfoBox container.\n * @property {Object} [boxStyle] An object literal whose properties define specific CSS\n *  style values to be applied to the InfoBox. Style values defined here override those that may\n *  be defined in the <code>boxClass</code> style sheet. If this property is changed after the\n *  InfoBox has been created, all previously set styles (except those defined in the style sheet)\n *  are removed from the InfoBox before the new style values are applied.\n * @property {string} closeBoxMargin The CSS margin style value for the close box.\n *  The default is \"2px\" (a 2-pixel margin on all sides).\n * @property {string} closeBoxURL The URL of the image representing the close box.\n *  Note: The default is the URL for Google's standard close box.\n *  Set this property to \"\" if no close box is required.\n * @property {Size} infoBoxClearance Minimum offset (in pixels) from the InfoBox to the\n *  map edge after an auto-pan.\n * @property {boolean} [isHidden=false] Hide the InfoBox on <tt>open</tt>.\n *  [Deprecated in favor of the <tt>visible</tt> property.]\n * @property {boolean} [visible=true] Show the InfoBox on <tt>open</tt>.\n * @property {boolean} alignBottom Align the bottom left corner of the InfoBox to the <code>position</code>\n *  location (default is <tt>false</tt> which means that the top left corner of the InfoBox is aligned).\n * @property {string} pane The pane where the InfoBox is to appear (default is \"floatPane\").\n *  Set the pane to \"mapPane\" if the InfoBox is being used as a map label.\n *  Valid pane names are the property names for the <tt>google.maps.MapPanes</tt> object.\n * @property {boolean} enableEventPropagation Propagate mousedown, mousemove, mouseover, mouseout,\n *  mouseup, click, dblclick, touchstart, touchend, touchmove, and contextmenu events in the InfoBox\n *  (default is <tt>false</tt> to mimic the behavior of a <tt>google.maps.InfoWindow</tt>). Set\n *  this property to <tt>true</tt> if the InfoBox is being used as a map label.\n */\n\n/**\n * Creates an InfoBox with the options specified in {@link InfoBoxOptions}.\n *  Call <tt>InfoBox.open</tt> to add the box to the map.\n * @constructor\n * @param {InfoBoxOptions} [opt_opts]\n */\nfunction InfoBox(opt_opts) {\n  opt_opts = opt_opts || {};\n  google.maps.OverlayView.apply(this, arguments); // Standard options (in common with google.maps.InfoWindow):\n  //\n\n  this.content_ = opt_opts.content || \"\";\n  this.disableAutoPan_ = opt_opts.disableAutoPan || false;\n  this.maxWidth_ = opt_opts.maxWidth || 0;\n  this.pixelOffset_ = opt_opts.pixelOffset || new google.maps.Size(0, 0);\n  this.position_ = opt_opts.position || new google.maps.LatLng(0, 0);\n  this.zIndex_ = opt_opts.zIndex || null; // Additional options (unique to InfoBox):\n  //\n\n  this.boxClass_ = opt_opts.boxClass || \"infoBox\";\n  this.boxStyle_ = opt_opts.boxStyle || {};\n  this.closeBoxMargin_ = opt_opts.closeBoxMargin || \"2px\";\n  this.closeBoxURL_ = opt_opts.closeBoxURL || \"http://www.google.com/intl/en_us/mapfiles/close.gif\";\n\n  if (opt_opts.closeBoxURL === \"\") {\n    this.closeBoxURL_ = \"\";\n  }\n\n  this.infoBoxClearance_ = opt_opts.infoBoxClearance || new google.maps.Size(1, 1);\n\n  if (typeof opt_opts.visible === \"undefined\") {\n    if (typeof opt_opts.isHidden === \"undefined\") {\n      opt_opts.visible = true;\n    } else {\n      opt_opts.visible = !opt_opts.isHidden;\n    }\n  }\n\n  this.isHidden_ = !opt_opts.visible;\n  this.alignBottom_ = opt_opts.alignBottom || false;\n  this.pane_ = opt_opts.pane || \"floatPane\";\n  this.enableEventPropagation_ = opt_opts.enableEventPropagation || false;\n  this.div_ = null;\n  this.closeListener_ = null;\n  this.moveListener_ = null;\n  this.mapListener_ = null;\n  this.contextListener_ = null;\n  this.eventListeners_ = null;\n  this.fixedWidthSet_ = null;\n}\n/* InfoBox extends OverlayView in the Google Maps API v3.\n */\n\n\nInfoBox.prototype = new google.maps.OverlayView();\n/**\n * Creates the DIV representing the InfoBox.\n * @private\n */\n\nInfoBox.prototype.createInfoBoxDiv_ = function () {\n  var i;\n  var events;\n  var bw;\n  var me = this; // This handler prevents an event in the InfoBox from being passed on to the map.\n  //\n\n  var cancelHandler = function cancelHandler(e) {\n    e.cancelBubble = true;\n\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n  }; // This handler ignores the current event in the InfoBox and conditionally prevents\n  // the event from being passed on to the map. It is used for the contextmenu event.\n  //\n\n\n  var ignoreHandler = function ignoreHandler(e) {\n    e.returnValue = false;\n\n    if (e.preventDefault) {\n      e.preventDefault();\n    }\n\n    if (!me.enableEventPropagation_) {\n      cancelHandler(e);\n    }\n  };\n\n  if (!this.div_) {\n    this.div_ = document.createElement(\"div\");\n    this.setBoxStyle_();\n\n    if (typeof this.content_.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + this.content_;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(this.content_);\n    } // Add the InfoBox DIV to the DOM\n\n\n    this.getPanes()[this.pane_].appendChild(this.div_);\n    this.addClickHandler_();\n\n    if (this.div_.style.width) {\n      this.fixedWidthSet_ = true;\n    } else {\n      if (this.maxWidth_ !== 0 && this.div_.offsetWidth > this.maxWidth_) {\n        this.div_.style.width = this.maxWidth_;\n        this.fixedWidthSet_ = true;\n      } else {\n        // The following code is needed to overcome problems with MSIE\n        bw = this.getBoxWidths_();\n        this.div_.style.width = this.div_.offsetWidth - bw.left - bw.right + \"px\";\n        this.fixedWidthSet_ = false;\n      }\n    }\n\n    this.panBox_(this.disableAutoPan_);\n\n    if (!this.enableEventPropagation_) {\n      this.eventListeners_ = []; // Cancel event propagation.\n      //\n      // Note: mousemove not included (to resolve Issue 152)\n\n      events = [\"mousedown\", \"mouseover\", \"mouseout\", \"mouseup\", \"click\", \"dblclick\", \"touchstart\", \"touchend\", \"touchmove\"];\n\n      for (i = 0; i < events.length; i++) {\n        this.eventListeners_.push(google.maps.event.addDomListener(this.div_, events[i], cancelHandler));\n      } // Workaround for Google bug that causes the cursor to change to a pointer\n      // when the mouse moves over a marker underneath InfoBox.\n\n\n      this.eventListeners_.push(google.maps.event.addDomListener(this.div_, \"mouseover\", function (e) {\n        this.style.cursor = \"default\";\n      }));\n    }\n\n    this.contextListener_ = google.maps.event.addDomListener(this.div_, \"contextmenu\", ignoreHandler);\n    /**\n     * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.\n     * @name InfoBox#domready\n     * @event\n     */\n\n    google.maps.event.trigger(this, \"domready\");\n  }\n};\n/**\n * Returns the HTML <IMG> tag for the close box.\n * @private\n */\n\n\nInfoBox.prototype.getCloseBoxImg_ = function () {\n  var img = \"\";\n\n  if (this.closeBoxURL_ !== \"\") {\n    img = \"<img\";\n    img += \" src='\" + this.closeBoxURL_ + \"'\";\n    img += \" align=right\"; // Do this because Opera chokes on style='float: right;'\n\n    img += \" style='\";\n    img += \" position: relative;\"; // Required by MSIE\n\n    img += \" cursor: pointer;\";\n    img += \" margin: \" + this.closeBoxMargin_ + \";\";\n    img += \"'>\";\n  }\n\n  return img;\n};\n/**\n * Adds the click handler to the InfoBox close box.\n * @private\n */\n\n\nInfoBox.prototype.addClickHandler_ = function () {\n  var closeBox;\n\n  if (this.closeBoxURL_ !== \"\") {\n    closeBox = this.div_.firstChild;\n    this.closeListener_ = google.maps.event.addDomListener(closeBox, \"click\", this.getCloseClickHandler_());\n  } else {\n    this.closeListener_ = null;\n  }\n};\n/**\n * Returns the function to call when the user clicks the close box of an InfoBox.\n * @private\n */\n\n\nInfoBox.prototype.getCloseClickHandler_ = function () {\n  var me = this;\n  return function (e) {\n    // 1.0.3 fix: Always prevent propagation of a close box click to the map:\n    e.cancelBubble = true;\n\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n    /**\n     * This event is fired when the InfoBox's close box is clicked.\n     * @name InfoBox#closeclick\n     * @event\n     */\n\n\n    google.maps.event.trigger(me, \"closeclick\");\n    me.close();\n  };\n};\n/**\n * Pans the map so that the InfoBox appears entirely within the map's visible area.\n * @private\n */\n\n\nInfoBox.prototype.panBox_ = function (disablePan) {\n  var map;\n  var bounds;\n  var xOffset = 0,\n      yOffset = 0;\n\n  if (!disablePan) {\n    map = this.getMap();\n\n    if (map instanceof google.maps.Map) {\n      // Only pan if attached to map, not panorama\n      if (!map.getBounds().contains(this.position_)) {\n        // Marker not in visible area of map, so set center\n        // of map to the marker position first.\n        map.setCenter(this.position_);\n      }\n\n      bounds = map.getBounds();\n      var mapDiv = map.getDiv();\n      var mapWidth = mapDiv.offsetWidth;\n      var mapHeight = mapDiv.offsetHeight;\n      var iwOffsetX = this.pixelOffset_.width;\n      var iwOffsetY = this.pixelOffset_.height;\n      var iwWidth = this.div_.offsetWidth;\n      var iwHeight = this.div_.offsetHeight;\n      var padX = this.infoBoxClearance_.width;\n      var padY = this.infoBoxClearance_.height;\n      var pixPosition = this.getProjection().fromLatLngToContainerPixel(this.position_);\n\n      if (pixPosition.x < -iwOffsetX + padX) {\n        xOffset = pixPosition.x + iwOffsetX - padX;\n      } else if (pixPosition.x + iwWidth + iwOffsetX + padX > mapWidth) {\n        xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth;\n      }\n\n      if (this.alignBottom_) {\n        if (pixPosition.y < -iwOffsetY + padY + iwHeight) {\n          yOffset = pixPosition.y + iwOffsetY - padY - iwHeight;\n        } else if (pixPosition.y + iwOffsetY + padY > mapHeight) {\n          yOffset = pixPosition.y + iwOffsetY + padY - mapHeight;\n        }\n      } else {\n        if (pixPosition.y < -iwOffsetY + padY) {\n          yOffset = pixPosition.y + iwOffsetY - padY;\n        } else if (pixPosition.y + iwHeight + iwOffsetY + padY > mapHeight) {\n          yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight;\n        }\n      }\n\n      if (!(xOffset === 0 && yOffset === 0)) {\n        // Move the map to the shifted center.\n        //\n        var c = map.getCenter();\n        map.panBy(xOffset, yOffset);\n      }\n    }\n  }\n};\n/**\n * Sets the style of the InfoBox by setting the style sheet and applying\n * other specific styles requested.\n * @private\n */\n\n\nInfoBox.prototype.setBoxStyle_ = function () {\n  var i, boxStyle;\n\n  if (this.div_) {\n    // Apply style values from the style sheet defined in the boxClass parameter:\n    this.div_.className = this.boxClass_; // Clear existing inline style values:\n\n    this.div_.style.cssText = \"\"; // Apply style values defined in the boxStyle parameter:\n\n    boxStyle = this.boxStyle_;\n\n    for (i in boxStyle) {\n      if (boxStyle.hasOwnProperty(i)) {\n        this.div_.style[i] = boxStyle[i];\n      }\n    } // Fix for iOS disappearing InfoBox problem.\n    // See http://stackoverflow.com/questions/9229535/google-maps-markers-disappear-at-certain-zoom-level-only-on-iphone-ipad\n\n\n    this.div_.style.WebkitTransform = \"translateZ(0)\"; // Fix up opacity style for benefit of MSIE:\n    //\n\n    if (typeof this.div_.style.opacity !== \"undefined\" && this.div_.style.opacity !== \"\") {\n      // See http://www.quirksmode.org/css/opacity.html\n      this.div_.style.MsFilter = \"\\\"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + this.div_.style.opacity * 100 + \")\\\"\";\n      this.div_.style.filter = \"alpha(opacity=\" + this.div_.style.opacity * 100 + \")\";\n    } // Apply required styles:\n    //\n\n\n    this.div_.style.position = \"absolute\";\n    this.div_.style.visibility = 'hidden';\n\n    if (this.zIndex_ !== null) {\n      this.div_.style.zIndex = this.zIndex_;\n    }\n\n    if (!this.div_.style.overflow) {\n      this.div_.style.overflow = \"auto\";\n    }\n  }\n};\n/**\n * Get the widths of the borders of the InfoBox.\n * @private\n * @return {Object} widths object (top, bottom left, right)\n */\n\n\nInfoBox.prototype.getBoxWidths_ = function () {\n  var computedStyle;\n  var bw = {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  };\n  var box = this.div_;\n\n  if (document.defaultView && document.defaultView.getComputedStyle) {\n    computedStyle = box.ownerDocument.defaultView.getComputedStyle(box, \"\");\n\n    if (computedStyle) {\n      // The computed styles are always in pixel units (good!)\n      bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;\n    }\n  } else if (document.documentElement.currentStyle) {\n    // MSIE\n    if (box.currentStyle) {\n      // The current styles may not be in pixel units, but assume they are (bad!)\n      bw.top = parseInt(box.currentStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(box.currentStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(box.currentStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(box.currentStyle.borderRightWidth, 10) || 0;\n    }\n  }\n\n  return bw;\n};\n/**\n * Invoked when <tt>close</tt> is called. Do not call it directly.\n */\n\n\nInfoBox.prototype.onRemove = function () {\n  if (this.div_) {\n    this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  }\n};\n/**\n * Draws the InfoBox based on the current map projection and zoom level.\n */\n\n\nInfoBox.prototype.draw = function () {\n  this.createInfoBoxDiv_();\n  var pixPosition = this.getProjection().fromLatLngToDivPixel(this.position_);\n  this.div_.style.left = pixPosition.x + this.pixelOffset_.width + \"px\";\n\n  if (this.alignBottom_) {\n    this.div_.style.bottom = -(pixPosition.y + this.pixelOffset_.height) + \"px\";\n  } else {\n    this.div_.style.top = pixPosition.y + this.pixelOffset_.height + \"px\";\n  }\n\n  if (this.isHidden_) {\n    this.div_.style.visibility = \"hidden\";\n  } else {\n    this.div_.style.visibility = \"visible\";\n  }\n};\n/**\n * Sets the options for the InfoBox. Note that changes to the <tt>maxWidth</tt>,\n *  <tt>closeBoxMargin</tt>, <tt>closeBoxURL</tt>, and <tt>enableEventPropagation</tt>\n *  properties have no affect until the current InfoBox is <tt>close</tt>d and a new one\n *  is <tt>open</tt>ed.\n * @param {InfoBoxOptions} opt_opts\n */\n\n\nInfoBox.prototype.setOptions = function (opt_opts) {\n  if (typeof opt_opts.boxClass !== \"undefined\") {\n    // Must be first\n    this.boxClass_ = opt_opts.boxClass;\n    this.setBoxStyle_();\n  }\n\n  if (typeof opt_opts.boxStyle !== \"undefined\") {\n    // Must be second\n    this.boxStyle_ = opt_opts.boxStyle;\n    this.setBoxStyle_();\n  }\n\n  if (typeof opt_opts.content !== \"undefined\") {\n    this.setContent(opt_opts.content);\n  }\n\n  if (typeof opt_opts.disableAutoPan !== \"undefined\") {\n    this.disableAutoPan_ = opt_opts.disableAutoPan;\n  }\n\n  if (typeof opt_opts.maxWidth !== \"undefined\") {\n    this.maxWidth_ = opt_opts.maxWidth;\n  }\n\n  if (typeof opt_opts.pixelOffset !== \"undefined\") {\n    this.pixelOffset_ = opt_opts.pixelOffset;\n  }\n\n  if (typeof opt_opts.alignBottom !== \"undefined\") {\n    this.alignBottom_ = opt_opts.alignBottom;\n  }\n\n  if (typeof opt_opts.position !== \"undefined\") {\n    this.setPosition(opt_opts.position);\n  }\n\n  if (typeof opt_opts.zIndex !== \"undefined\") {\n    this.setZIndex(opt_opts.zIndex);\n  }\n\n  if (typeof opt_opts.closeBoxMargin !== \"undefined\") {\n    this.closeBoxMargin_ = opt_opts.closeBoxMargin;\n  }\n\n  if (typeof opt_opts.closeBoxURL !== \"undefined\") {\n    this.closeBoxURL_ = opt_opts.closeBoxURL;\n  }\n\n  if (typeof opt_opts.infoBoxClearance !== \"undefined\") {\n    this.infoBoxClearance_ = opt_opts.infoBoxClearance;\n  }\n\n  if (typeof opt_opts.isHidden !== \"undefined\") {\n    this.isHidden_ = opt_opts.isHidden;\n  }\n\n  if (typeof opt_opts.visible !== \"undefined\") {\n    this.isHidden_ = !opt_opts.visible;\n  }\n\n  if (typeof opt_opts.enableEventPropagation !== \"undefined\") {\n    this.enableEventPropagation_ = opt_opts.enableEventPropagation;\n  }\n\n  if (this.div_) {\n    this.draw();\n  }\n};\n/**\n * Sets the content of the InfoBox.\n *  The content can be plain text or an HTML DOM node.\n * @param {string|Node} content\n */\n\n\nInfoBox.prototype.setContent = function (content) {\n  this.content_ = content;\n\n  if (this.div_) {\n    if (this.closeListener_) {\n      google.maps.event.removeListener(this.closeListener_);\n      this.closeListener_ = null;\n    } // Odd code required to make things work with MSIE.\n    //\n\n\n    if (!this.fixedWidthSet_) {\n      this.div_.style.width = \"\";\n    }\n\n    if (typeof content.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + content;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(content);\n    } // Perverse code required to make things work with MSIE.\n    // (Ensures the close box does, in fact, float to the right.)\n    //\n\n\n    if (!this.fixedWidthSet_) {\n      this.div_.style.width = this.div_.offsetWidth + \"px\";\n\n      if (typeof content.nodeType === \"undefined\") {\n        this.div_.innerHTML = this.getCloseBoxImg_() + content;\n      } else {\n        this.div_.innerHTML = this.getCloseBoxImg_();\n        this.div_.appendChild(content);\n      }\n    }\n\n    this.addClickHandler_();\n  }\n  /**\n   * This event is fired when the content of the InfoBox changes.\n   * @name InfoBox#content_changed\n   * @event\n   */\n\n\n  google.maps.event.trigger(this, \"content_changed\");\n};\n/**\n * Sets the geographic location of the InfoBox.\n * @param {LatLng} latlng\n */\n\n\nInfoBox.prototype.setPosition = function (latlng) {\n  this.position_ = latlng;\n\n  if (this.div_) {\n    this.draw();\n  }\n  /**\n   * This event is fired when the position of the InfoBox changes.\n   * @name InfoBox#position_changed\n   * @event\n   */\n\n\n  google.maps.event.trigger(this, \"position_changed\");\n};\n/**\n * Sets the zIndex style for the InfoBox.\n * @param {number} index\n */\n\n\nInfoBox.prototype.setZIndex = function (index) {\n  this.zIndex_ = index;\n\n  if (this.div_) {\n    this.div_.style.zIndex = index;\n  }\n  /**\n   * This event is fired when the zIndex of the InfoBox changes.\n   * @name InfoBox#zindex_changed\n   * @event\n   */\n\n\n  google.maps.event.trigger(this, \"zindex_changed\");\n};\n/**\n * Sets the visibility of the InfoBox.\n * @param {boolean} isVisible\n */\n\n\nInfoBox.prototype.setVisible = function (isVisible) {\n  this.isHidden_ = !isVisible;\n\n  if (this.div_) {\n    this.div_.style.visibility = this.isHidden_ ? \"hidden\" : \"visible\";\n  }\n};\n/**\n * Returns the content of the InfoBox.\n * @returns {string | Node}\n */\n\n\nInfoBox.prototype.getContent = function () {\n  return this.content_;\n};\n/**\n * Returns the geographic location of the InfoBox.\n * @returns {LatLng}\n */\n\n\nInfoBox.prototype.getPosition = function () {\n  return this.position_;\n};\n/**\n * Returns the zIndex for the InfoBox.\n * @returns {number}\n */\n\n\nInfoBox.prototype.getZIndex = function () {\n  return this.zIndex_;\n};\n/**\n * Returns a flag indicating whether the InfoBox is visible.\n * @returns {boolean}\n */\n\n\nInfoBox.prototype.getVisible = function () {\n  var isVisible;\n\n  if (typeof this.getMap() === \"undefined\" || this.getMap() === null) {\n    isVisible = false;\n  } else {\n    isVisible = !this.isHidden_;\n  }\n\n  return isVisible;\n};\n/**\n * Shows the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\n\n\nInfoBox.prototype.show = function () {\n  this.isHidden_ = false;\n\n  if (this.div_) {\n    this.div_.style.visibility = \"visible\";\n  }\n};\n/**\n * Hides the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\n\n\nInfoBox.prototype.hide = function () {\n  this.isHidden_ = true;\n\n  if (this.div_) {\n    this.div_.style.visibility = \"hidden\";\n  }\n};\n/**\n * Adds the InfoBox to the specified map or Street View panorama. If <tt>anchor</tt>\n *  (usually a <tt>google.maps.Marker</tt>) is specified, the position\n *  of the InfoBox is set to the position of the <tt>anchor</tt>. If the\n *  anchor is dragged to a new location, the InfoBox moves as well.\n * @param {Map|StreetViewPanorama} map\n * @param {MVCObject} [anchor]\n */\n\n\nInfoBox.prototype.open = function (map, anchor) {\n  var me = this;\n\n  if (anchor) {\n    this.position_ = anchor.getPosition();\n    this.moveListener_ = google.maps.event.addListener(anchor, \"position_changed\", function () {\n      me.setPosition(this.getPosition());\n    });\n    this.mapListener_ = google.maps.event.addListener(anchor, \"map_changed\", function () {\n      me.setMap(this.map);\n    });\n  }\n\n  this.setMap(map);\n\n  if (this.div_) {\n    this.panBox_();\n  }\n};\n/**\n * Removes the InfoBox from the map.\n */\n\n\nInfoBox.prototype.close = function () {\n  var i;\n\n  if (this.closeListener_) {\n    google.maps.event.removeListener(this.closeListener_);\n    this.closeListener_ = null;\n  }\n\n  if (this.eventListeners_) {\n    for (i = 0; i < this.eventListeners_.length; i++) {\n      google.maps.event.removeListener(this.eventListeners_[i]);\n    }\n\n    this.eventListeners_ = null;\n  }\n\n  if (this.moveListener_) {\n    google.maps.event.removeListener(this.moveListener_);\n    this.moveListener_ = null;\n  }\n\n  if (this.mapListener_) {\n    google.maps.event.removeListener(this.mapListener_);\n    this.mapListener_ = null;\n  }\n\n  if (this.contextListener_) {\n    google.maps.event.removeListener(this.contextListener_);\n    this.contextListener_ = null;\n  }\n\n  this.setMap(null);\n};\n\nmodule.exports = {\n  default: InfoBox,\n  InfoBox: InfoBox\n};","map":null,"metadata":{},"sourceType":"script"}