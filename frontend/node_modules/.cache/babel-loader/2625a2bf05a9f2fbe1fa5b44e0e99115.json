{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firebase-firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\n\nclass FirebaseAuthService {\n  //   database;\n  //   storage;\n  constructor() {// UNCOMMENT IF YOU WANT TO USE FIREBASE\n    // this.init();\n    // this.auth = firebase.auth();\n    // this.firestore = firebase.firestore();\n    //   this.database  = firebase.database();\n    //   this.storage = firebase.storage();\n    // this.googleProvider = new firebase.auth.GoogleAuthProvider();\n    // this.facebookProvider = new firebase.auth.FacebookAuthProvider();\n    // this.twitterProvider = new firebase.auth.TwitterAuthProvider();\n\n    this.init = () => {\n      firebase.initializeApp(firebaseConfig);\n    };\n\n    this.checkAuthStatus = callback => {\n      this.auth.onAuthStateChanged(callback);\n    };\n\n    this.signUpWithEmailAndPassword = (email, password) => {\n      return this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    this.signInWithEmailAndPassword = (email, password) => {\n      return this.auth.signInWithEmailAndPassword(email, password);\n    };\n\n    this.signInWithPopup = media => {\n      switch (media) {\n        case \"google\":\n          return this.auth.signInWithPopup(this.googleProvider);\n\n        case \"facebook\":\n          return this.auth.signInWithPopup(this.facebookProvider);\n\n        case \"twitter\":\n          return this.auth.signInWithPopup(this.twitterProvider);\n\n        default:\n          break;\n      }\n    };\n\n    this.signInWithPhoneNumber = phoneNumber => {\n      return this.auth.signInWithPhoneNumber(phoneNumber);\n    };\n\n    this.getUserData = docId => {\n      //   generally it's better to use uid for docId\n      this.firestore.collection(\"users\").doc(docId).get().then(doc => {\n        console.log(doc.data());\n      });\n    };\n\n    this.getAllUser = () => {\n      this.firestore.collection(\"users\").get().then(docList => {\n        docList.forEach(doc => {\n          console.log(doc.data());\n        });\n      });\n    };\n\n    this.signOut = () => {\n      return this.auth.signOut();\n    };\n  }\n\n}\n\nconst instance = new FirebaseAuthService();\nexport default instance;","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/app/services/firebase/firebaseAuthService.js"],"names":["firebase","firebaseConfig","FirebaseAuthService","constructor","init","initializeApp","checkAuthStatus","callback","auth","onAuthStateChanged","signUpWithEmailAndPassword","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","media","googleProvider","facebookProvider","twitterProvider","signInWithPhoneNumber","phoneNumber","getUserData","docId","firestore","collection","doc","get","then","console","log","data","getAllUser","docList","forEach","signOut","instance"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,6BAAP;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,mBAAN,CAA0B;AAGxB;AACA;AAMAC,EAAAA,WAAW,GAAG,CACZ;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAZY,SAedC,IAfc,GAeP,MAAM;AACXJ,MAAAA,QAAQ,CAACK,aAAT,CAAuBJ,cAAvB;AACD,KAjBa;;AAAA,SAmBdK,eAnBc,GAmBIC,QAAQ,IAAI;AAC5B,WAAKC,IAAL,CAAUC,kBAAV,CAA6BF,QAA7B;AACD,KArBa;;AAAA,SAuBdG,0BAvBc,GAuBe,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAChD,aAAO,KAAKJ,IAAL,CAAUK,8BAAV,CAAyCF,KAAzC,EAAgDC,QAAhD,CAAP;AACD,KAzBa;;AAAA,SA2BdE,0BA3Bc,GA2Be,CAACH,KAAD,EAAQC,QAAR,KAAqB;AAChD,aAAO,KAAKJ,IAAL,CAAUM,0BAAV,CAAqCH,KAArC,EAA4CC,QAA5C,CAAP;AACD,KA7Ba;;AAAA,SA+BdG,eA/Bc,GA+BIC,KAAK,IAAI;AACzB,cAAQA,KAAR;AACE,aAAK,QAAL;AACE,iBAAO,KAAKR,IAAL,CAAUO,eAAV,CAA0B,KAAKE,cAA/B,CAAP;;AAEF,aAAK,UAAL;AACE,iBAAO,KAAKT,IAAL,CAAUO,eAAV,CAA0B,KAAKG,gBAA/B,CAAP;;AAEF,aAAK,SAAL;AACE,iBAAO,KAAKV,IAAL,CAAUO,eAAV,CAA0B,KAAKI,eAA/B,CAAP;;AAEF;AACE;AAXJ;AAaD,KA7Ca;;AAAA,SA+CdC,qBA/Cc,GA+CUC,WAAW,IAAI;AACrC,aAAO,KAAKb,IAAL,CAAUY,qBAAV,CAAgCC,WAAhC,CAAP;AACD,KAjDa;;AAAA,SAmDdC,WAnDc,GAmDAC,KAAK,IAAI;AACrB;AACA,WAAKC,SAAL,CACGC,UADH,CACc,OADd,EAEGC,GAFH,CAEOH,KAFP,EAGGI,GAHH,GAIGC,IAJH,CAIQF,GAAG,IAAI;AACXG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAJ,EAAZ;AACD,OANH;AAOD,KA5Da;;AAAA,SA8DdC,UA9Dc,GA8DD,MAAM;AACjB,WAAKR,SAAL,CACGC,UADH,CACc,OADd,EAEGE,GAFH,GAGGC,IAHH,CAGQK,OAAO,IAAI;AACfA,QAAAA,OAAO,CAACC,OAAR,CAAgBR,GAAG,IAAI;AACrBG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAJ,EAAZ;AACD,SAFD;AAGD,OAPH;AAQD,KAvEa;;AAAA,SAyEdI,OAzEc,GAyEJ,MAAM;AACd,aAAO,KAAK3B,IAAL,CAAU2B,OAAV,EAAP;AACD,KA3Ea;AAab;;AAvBuB;;AAwF1B,MAAMC,QAAQ,GAAG,IAAIlC,mBAAJ,EAAjB;AAEA,eAAekC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firebase-firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\n\nclass FirebaseAuthService {\n  auth;\n  firestore;\n  //   database;\n  //   storage;\n\n  googleProvider;\n  facebookProvider;\n  twitterProvider;\n\n  constructor() {\n    // UNCOMMENT IF YOU WANT TO USE FIREBASE\n\n    // this.init();\n    // this.auth = firebase.auth();\n    // this.firestore = firebase.firestore();\n\n    //   this.database  = firebase.database();\n    //   this.storage = firebase.storage();\n    \n    // this.googleProvider = new firebase.auth.GoogleAuthProvider();\n    // this.facebookProvider = new firebase.auth.FacebookAuthProvider();\n    // this.twitterProvider = new firebase.auth.TwitterAuthProvider();\n  }\n\n  init = () => {\n    firebase.initializeApp(firebaseConfig);\n  };\n\n  checkAuthStatus = callback => {\n    this.auth.onAuthStateChanged(callback);\n  };\n\n  signUpWithEmailAndPassword = (email, password) => {\n    return this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  signInWithEmailAndPassword = (email, password) => {\n    return this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  signInWithPopup = media => {\n    switch (media) {\n      case \"google\":\n        return this.auth.signInWithPopup(this.googleProvider);\n\n      case \"facebook\":\n        return this.auth.signInWithPopup(this.facebookProvider);\n\n      case \"twitter\":\n        return this.auth.signInWithPopup(this.twitterProvider);\n\n      default:\n        break;\n    }\n  };\n\n  signInWithPhoneNumber = phoneNumber => {\n    return this.auth.signInWithPhoneNumber(phoneNumber);\n  };\n\n  getUserData = docId => {\n    //   generally it's better to use uid for docId\n    this.firestore\n      .collection(\"users\")\n      .doc(docId)\n      .get()\n      .then(doc => {\n        console.log(doc.data());\n      });\n  };\n\n  getAllUser = () => {\n    this.firestore\n      .collection(\"users\")\n      .get()\n      .then(docList => {\n        docList.forEach(doc => {\n          console.log(doc.data());\n        });\n      });\n  };\n\n  signOut = () => {\n    return this.auth.signOut();\n  };\n}\n\nconst instance = new FirebaseAuthService();\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}