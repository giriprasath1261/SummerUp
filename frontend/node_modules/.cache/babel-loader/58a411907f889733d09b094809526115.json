{"ast":null,"code":"import _objectSpread from \"/home/giriprasath/Downloads/matx-react/matx-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport Mock from \"../mock\";\nimport shortId from \"shortid\";\nimport * as _ from \"lodash\";\nconst ChatDB = {\n  user: [{\n    id: \"7863a6802ez0e277a0f98534\",\n    name: \"John Doe\",\n    avatar: \"assets/images/face-1.jpg\",\n    status: \"online\",\n    chatInfo: [{\n      chatId: \"89564a680b3249760ea21fe77\",\n      contactId: \"323sa680b3249760ea21rt47\",\n      unread: 4,\n      lastChatTime: \"2017-06-12T02:10:18.931Z\"\n    }, {\n      chatId: \"3289564a680b2134760ea21fe7753\",\n      contactId: \"14663a3406eb47ffa63d4fec9429cb71\",\n      unread: 0,\n      lastChatTime: \"2019-03-10T02:10:18.931Z\"\n    }]\n  }],\n  contacts: [{\n    id: \"323sa680b3249760ea21rt47\",\n    name: \"Frank Powell\",\n    avatar: \"assets/images/faces/13.jpg\",\n    status: \"online\",\n    mood: \"\"\n  }, {\n    id: \"7863a6802ez0e277a0f98534\",\n    name: \"John Doe\",\n    avatar: \"assets/images/face-1.jpg\",\n    status: \"online\",\n    mood: \"\"\n  }, {\n    id: \"14663a3406eb47ffa63d4fec9429cb71\",\n    name: \"Betty Diaz\",\n    avatar: \"assets/images/faces/12.jpg\",\n    status: \"online\",\n    mood: \"\"\n  }, {\n    id: \"43bd9bc59d164b5aea498e3ae1c24c3c\",\n    name: \"Brian Stephens\",\n    avatar: \"assets/images/faces/3.jpg\",\n    status: \"online\",\n    mood: \"\"\n  }, {\n    id: \"3fc8e01f3ce649d1caf884fbf4f698e4\",\n    name: \"Jacqueline Day\",\n    avatar: \"assets/images/faces/16.jpg\",\n    status: \"offline\",\n    mood: \"\"\n  }, {\n    id: \"e929b1d790ab49968ed8e34648553df4\",\n    name: \"Arthur Mendoza\",\n    avatar: \"assets/images/faces/10.jpg\",\n    status: \"online\",\n    mood: \"\"\n  }, {\n    id: \"d6caf04bba614632b5fecf91aebf4564\",\n    name: \"Jeremy Lee\",\n    avatar: \"assets/images/faces/9.jpg\",\n    status: \"offline\",\n    mood: \"\"\n  }, {\n    id: \"be0fb188c8e242f097fafa24632107e4\",\n    name: \"Johnny Newman\",\n    avatar: \"assets/images/faces/5.jpg\",\n    status: \"offline\",\n    mood: \"\"\n  }, {\n    id: \"dea902191b964a68ba5f2d93cff37e13\",\n    name: \"Jeffrey Little\",\n    avatar: \"assets/images/faces/15.jpg\",\n    status: \"online\",\n    mood: \"\"\n  }, {\n    id: \"0bf58f5ccc4543a9f8747350b7bda3c7\",\n    name: \"Barbara Romero\",\n    avatar: \"assets/images/faces/4.jpg\",\n    status: \"offline\",\n    mood: \"\"\n  }, {\n    id: \"c5d7498bbcb84d81fc72168871ac6a6e\",\n    name: \"Daniel James\",\n    avatar: \"assets/images/faces/2.jpg\",\n    status: \"offline\",\n    mood: \"\"\n  }, {\n    id: \"97bfbdd9413e46efdaca2010400fe18c\",\n    name: \"Alice Sanders\",\n    avatar: \"assets/images/faces/17.jpg\",\n    status: \"offline\",\n    mood: \"\"\n  }],\n  chatCollection: [{\n    id: \"89564a680b3249760ea21fe77\",\n    chats: [{\n      contactId: \"323sa680b3249760ea21rt47\",\n      text: \"Do you ever find yourself falling into the “discount trap?”\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }, {\n      contactId: \"7863a6802ez0e277a0f98534\",\n      text: \"Giving away your knowledge or product just to gain clients?\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }, {\n      contactId: \"323sa680b3249760ea21rt47\",\n      text: \"Yes\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }, {\n      contactId: \"7863a6802ez0e277a0f98534\",\n      text: \"Don’t feel bad. It happens to a lot of us\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }, {\n      contactId: \"323sa680b3249760ea21rt47\",\n      text: \"Do you ever find yourself falling into the “discount trap?”\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }, {\n      contactId: \"7863a6802ez0e277a0f98534\",\n      text: \"Giving away your knowledge or product just to gain clients?\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }, {\n      contactId: \"323sa680b3249760ea21rt47\",\n      text: \"Yes\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }, {\n      contactId: \"7863a6802ez0e277a0f98534\",\n      text: \"Don’t feel bad. It happens to a lot of us\",\n      time: \"2018-02-10T08:45:28.291Z\"\n    }]\n  }, {\n    id: \"3289564a680b2134760ea21fe7753\",\n    chats: [{\n      contactId: \"14663a3406eb47ffa63d4fec9429cb71\",\n      text: \"Do you ever find yourself falling into the “discount trap?”\",\n      time: \"2019-03-10T08:45:28.291Z\"\n    }, {\n      contactId: \"7863a6802ez0e277a0f98534\",\n      text: \"Giving away your knowledge or product just to gain clients?\",\n      time: \"2019-03-10T08:45:28.291Z\"\n    }, {\n      contactId: \"14663a3406eb47ffa63d4fec9429cb71\",\n      text: \"Yes\",\n      time: \"2019-03-10T08:45:28.291Z\"\n    }, {\n      contactId: \"7863a6802ez0e277a0f98534\",\n      text: \"Don’t feel bad. It happens to a lot of us\",\n      time: \"2019-03-10T08:45:28.291Z\"\n    }]\n  }]\n};\nMock.onGet(\"/api/chat\").reply(config => {\n  const id = config.data;\n  const chats = ChatDB.chatCollection.find(collection => collection.id === id).chats;\n  const response = chats.map(chat => {\n    let temp = ChatDB.contacts.find(user => user.id === chat.contactId);\n    return _objectSpread(_objectSpread({}, chat), temp);\n  });\n  return [200, response];\n});\nMock.onGet(\"/api/chat/chat-room\").reply(config => {\n  const _JSON$parse = JSON.parse(config.data),\n        currentUser = _JSON$parse.currentUser,\n        contactId = _JSON$parse.contactId;\n\n  const chatUser = ChatDB.user.find(user => user.id === currentUser);\n  const chatRoom = chatUser.chatInfo.find(chat => chat.contactId === contactId);\n\n  if (chatRoom) {\n    const chats = ChatDB.chatCollection.find(collection => collection.id === chatRoom.chatId).chats;\n    const messageList = chats.map(chat => {\n      let temp = ChatDB.contacts.find(user => user.id === chat.contactId);\n      return _objectSpread(_objectSpread({}, chat), temp);\n    });\n    const response = {\n      chatId: chatRoom.chatId,\n      messageList,\n      recentListUpdated: false\n    };\n    return [200, response];\n  } else {\n    let chatId = shortId.generate();\n    ChatDB.user.map(user => {\n      if (currentUser === user.id) {\n        user.chatInfo.push({\n          chatId,\n          contactId,\n          lastChatTime: Date.now(),\n          unread: 0\n        });\n      }\n    });\n    ChatDB.chatCollection.push({\n      id: chatId,\n      chats: []\n    });\n    const response = {\n      chatId,\n      messageList: [],\n      recentListUpdated: true\n    };\n    return [200, response];\n  }\n});\nMock.onGet(\"/api/chat/contacts/recent\").reply(config => {\n  let temp = {\n    contact: \"\"\n  };\n  const id = config.data;\n  const contacts = ChatDB.user.find(user => user.id === id).chatInfo;\n  const response = contacts.map(contact => {\n    temp.contact = ChatDB.contacts.find(user => user.id === contact.contactId);\n    return _objectSpread(_objectSpread({}, temp.contact), contact);\n  });\n  return [200, response];\n});\nMock.onGet(\"/api/chat/contacts/all\").reply(config => {\n  const id = config.data;\n  const response = ChatDB.contacts.filter(contact => contact.id !== id);\n  return [200, response];\n});\nMock.onGet(\"/api/chat/contacts\").reply(config => {\n  const id = config.data;\n  const response = ChatDB.contacts.find(contact => contact.id === id);\n  return [200, response];\n});\nMock.onPost(\"/api/chat/add\").reply(config => {\n  let chatDetails = JSON.parse(config.data);\n  let chatId = chatDetails.chatId;\n  ChatDB.chatCollection.map(chatRoom => {\n    if (chatId === chatRoom.id) {\n      delete chatDetails.chatId;\n      chatRoom.chats.push(_objectSpread({}, chatDetails));\n    }\n  });\n  let chats = ChatDB.chatCollection.find(chatRoom => chatRoom.id === chatId).chats;\n  let response = chats.map(chat => {\n    let temp = ChatDB.contacts.find(user => user.id === chat.contactId);\n    return _objectSpread(_objectSpread({}, chat), temp);\n  });\n  return [200, response];\n});","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/fake-db/db/chat.js"],"names":["Mock","shortId","_","ChatDB","user","id","name","avatar","status","chatInfo","chatId","contactId","unread","lastChatTime","contacts","mood","chatCollection","chats","text","time","onGet","reply","config","data","find","collection","response","map","chat","temp","JSON","parse","currentUser","chatUser","chatRoom","messageList","recentListUpdated","generate","push","Date","now","contact","filter","onPost","chatDetails"],"mappings":"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","sourcesContent":["import Mock from \"../mock\";\nimport shortId from \"shortid\";\nimport * as _ from \"lodash\";\n\nconst ChatDB = {\n  user: [\n    {\n      id: \"7863a6802ez0e277a0f98534\",\n      name: \"John Doe\",\n      avatar: \"assets/images/face-1.jpg\",\n      status: \"online\",\n      chatInfo: [\n        {\n          chatId: \"89564a680b3249760ea21fe77\",\n          contactId: \"323sa680b3249760ea21rt47\",\n          unread: 4,\n          lastChatTime: \"2017-06-12T02:10:18.931Z\"\n        },\n        {\n          chatId: \"3289564a680b2134760ea21fe7753\",\n          contactId: \"14663a3406eb47ffa63d4fec9429cb71\",\n          unread: 0,\n          lastChatTime: \"2019-03-10T02:10:18.931Z\"\n        }\n      ]\n    }\n  ],\n\n  contacts: [\n    {\n      id: \"323sa680b3249760ea21rt47\",\n      name: \"Frank Powell\",\n      avatar: \"assets/images/faces/13.jpg\",\n      status: \"online\",\n      mood: \"\"\n    },\n    {\n      id: \"7863a6802ez0e277a0f98534\",\n      name: \"John Doe\",\n      avatar: \"assets/images/face-1.jpg\",\n      status: \"online\",\n      mood: \"\"\n    },\n    {\n      id: \"14663a3406eb47ffa63d4fec9429cb71\",\n      name: \"Betty Diaz\",\n      avatar: \"assets/images/faces/12.jpg\",\n      status: \"online\",\n      mood: \"\"\n    },\n    {\n      id: \"43bd9bc59d164b5aea498e3ae1c24c3c\",\n      name: \"Brian Stephens\",\n      avatar: \"assets/images/faces/3.jpg\",\n      status: \"online\",\n      mood: \"\"\n    },\n    {\n      id: \"3fc8e01f3ce649d1caf884fbf4f698e4\",\n      name: \"Jacqueline Day\",\n      avatar: \"assets/images/faces/16.jpg\",\n      status: \"offline\",\n      mood: \"\"\n    },\n    {\n      id: \"e929b1d790ab49968ed8e34648553df4\",\n      name: \"Arthur Mendoza\",\n      avatar: \"assets/images/faces/10.jpg\",\n      status: \"online\",\n      mood: \"\"\n    },\n    {\n      id: \"d6caf04bba614632b5fecf91aebf4564\",\n      name: \"Jeremy Lee\",\n      avatar: \"assets/images/faces/9.jpg\",\n      status: \"offline\",\n      mood: \"\"\n    },\n    {\n      id: \"be0fb188c8e242f097fafa24632107e4\",\n      name: \"Johnny Newman\",\n      avatar: \"assets/images/faces/5.jpg\",\n      status: \"offline\",\n      mood: \"\"\n    },\n    {\n      id: \"dea902191b964a68ba5f2d93cff37e13\",\n      name: \"Jeffrey Little\",\n      avatar: \"assets/images/faces/15.jpg\",\n      status: \"online\",\n      mood: \"\"\n    },\n    {\n      id: \"0bf58f5ccc4543a9f8747350b7bda3c7\",\n      name: \"Barbara Romero\",\n      avatar: \"assets/images/faces/4.jpg\",\n      status: \"offline\",\n      mood: \"\"\n    },\n    {\n      id: \"c5d7498bbcb84d81fc72168871ac6a6e\",\n      name: \"Daniel James\",\n      avatar: \"assets/images/faces/2.jpg\",\n      status: \"offline\",\n      mood: \"\"\n    },\n    {\n      id: \"97bfbdd9413e46efdaca2010400fe18c\",\n      name: \"Alice Sanders\",\n      avatar: \"assets/images/faces/17.jpg\",\n      status: \"offline\",\n      mood: \"\"\n    }\n  ],\n\n  chatCollection: [\n    {\n      id: \"89564a680b3249760ea21fe77\",\n      chats: [\n        {\n          contactId: \"323sa680b3249760ea21rt47\",\n          text: \"Do you ever find yourself falling into the “discount trap?”\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"7863a6802ez0e277a0f98534\",\n          text: \"Giving away your knowledge or product just to gain clients?\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"323sa680b3249760ea21rt47\",\n          text: \"Yes\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"7863a6802ez0e277a0f98534\",\n          text: \"Don’t feel bad. It happens to a lot of us\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"323sa680b3249760ea21rt47\",\n          text: \"Do you ever find yourself falling into the “discount trap?”\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"7863a6802ez0e277a0f98534\",\n          text: \"Giving away your knowledge or product just to gain clients?\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"323sa680b3249760ea21rt47\",\n          text: \"Yes\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"7863a6802ez0e277a0f98534\",\n          text: \"Don’t feel bad. It happens to a lot of us\",\n          time: \"2018-02-10T08:45:28.291Z\"\n        }\n      ]\n    },\n    {\n      id: \"3289564a680b2134760ea21fe7753\",\n      chats: [\n        {\n          contactId: \"14663a3406eb47ffa63d4fec9429cb71\",\n          text: \"Do you ever find yourself falling into the “discount trap?”\",\n          time: \"2019-03-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"7863a6802ez0e277a0f98534\",\n          text: \"Giving away your knowledge or product just to gain clients?\",\n          time: \"2019-03-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"14663a3406eb47ffa63d4fec9429cb71\",\n          text: \"Yes\",\n          time: \"2019-03-10T08:45:28.291Z\"\n        },\n        {\n          contactId: \"7863a6802ez0e277a0f98534\",\n          text: \"Don’t feel bad. It happens to a lot of us\",\n          time: \"2019-03-10T08:45:28.291Z\"\n        }\n      ]\n    }\n  ]\n};\n\nMock.onGet(\"/api/chat\").reply(config => {\n  const id = config.data;\n  const chats = ChatDB.chatCollection.find(collection => collection.id === id)\n    .chats;\n  const response = chats.map(chat => {\n    let temp = ChatDB.contacts.find(user => user.id === chat.contactId);\n    return { ...chat, ...temp };\n  });\n  return [200, response];\n});\n\nMock.onGet(\"/api/chat/chat-room\").reply(config => {\n  const { currentUser, contactId } = JSON.parse(config.data);\n\n  const chatUser = ChatDB.user.find(user => user.id === currentUser);\n  const chatRoom = chatUser.chatInfo.find(chat => chat.contactId === contactId);\n\n  if (chatRoom) {\n    const chats = ChatDB.chatCollection.find(\n      collection => collection.id === chatRoom.chatId\n    ).chats;\n    const messageList = chats.map(chat => {\n      let temp = ChatDB.contacts.find(user => user.id === chat.contactId);\n      return { ...chat, ...temp };\n    });\n    const response = {\n      chatId: chatRoom.chatId,\n      messageList,\n      recentListUpdated: false\n    };\n    return [200, response];\n  } else {\n    let chatId = shortId.generate();\n    ChatDB.user.map(user => {\n      if (currentUser === user.id) {\n        user.chatInfo.push({\n          chatId,\n          contactId,\n          lastChatTime: Date.now(),\n          unread: 0\n        });\n      }\n    });\n    ChatDB.chatCollection.push({\n      id: chatId,\n      chats: []\n    });\n\n    const response = {\n      chatId,\n      messageList: [],\n      recentListUpdated: true\n    };\n\n    return [200, response];\n  }\n});\n\nMock.onGet(\"/api/chat/contacts/recent\").reply(config => {\n  let temp = { contact: \"\" };\n  const id = config.data;\n  const contacts = ChatDB.user.find(user => user.id === id).chatInfo;\n  const response = contacts.map(contact => {\n    temp.contact = ChatDB.contacts.find(user => user.id === contact.contactId);\n    return { ...temp.contact, ...contact };\n  });\n  return [200, response];\n});\n\nMock.onGet(\"/api/chat/contacts/all\").reply(config => {\n  const id = config.data;\n  const response = ChatDB.contacts.filter(contact => contact.id !== id);\n  return [200, response];\n});\n\nMock.onGet(\"/api/chat/contacts\").reply(config => {\n  const id = config.data;\n  const response = ChatDB.contacts.find(contact => contact.id === id);\n  return [200, response];\n});\n\nMock.onPost(\"/api/chat/add\").reply(config => {\n  let chatDetails = JSON.parse(config.data);\n  let { chatId } = chatDetails;\n  ChatDB.chatCollection.map(chatRoom => {\n    if (chatId === chatRoom.id) {\n      delete chatDetails.chatId;\n      chatRoom.chats.push({ ...chatDetails });\n    }\n  });\n  let chats = ChatDB.chatCollection.find(chatRoom => chatRoom.id === chatId)\n    .chats;\n\n  let response = chats.map(chat => {\n    let temp = ChatDB.contacts.find(user => user.id === chat.contactId);\n    return { ...chat, ...temp };\n  });\n  return [200, response];\n});\n"]},"metadata":{},"sourceType":"module"}