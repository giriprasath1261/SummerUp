{"ast":null,"code":"import _objectSpread from \"/home/giriprasath/Downloads/matx-react/matx-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport Mock from \"../mock\";\nimport * as _ from \"lodash\";\nconst TodoDB = {\n  todo: [{\n    id: 1,\n    title: \"API problem\",\n    note: \"API is malfunctioning. kindly fix it\",\n    important: true,\n    starred: true,\n    done: false,\n    read: false,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1, 2]\n  }, {\n    id: 2,\n    title: \"Mobile problem\",\n    note: \"Mobile is malfunctioning. fix it\",\n    important: false,\n    starred: false,\n    done: true,\n    read: true,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [2]\n  }, {\n    id: 3,\n    title: \"API problem\",\n    note: \"API is malfunctioning. fix it\",\n    important: false,\n    starred: false,\n    done: true,\n    read: false,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1]\n  }, {\n    id: 4,\n    title: \"API problem\",\n    note: \"API is malfunctioning. fix it\",\n    important: false,\n    starred: false,\n    done: false,\n    read: true,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1, 2, 3]\n  }, {\n    id: 5,\n    title: \"API problem\",\n    note: \"API is malfunctioning. fix it\",\n    important: false,\n    starred: false,\n    done: true,\n    read: false,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1]\n  }],\n  tag: [{\n    id: 1,\n    name: \"frontend\"\n  }, {\n    id: 2,\n    name: \"backend\"\n  }, {\n    id: 3,\n    name: \"API\"\n  }, {\n    id: 4,\n    name: \"issue\"\n  }, {\n    id: 5,\n    name: \"mobile\"\n  }]\n};\nMock.onGet(\"/api/todo/all\").reply(config => {\n  const response = TodoDB.todo;\n  return [200, response];\n});\nMock.onGet(\"/api/todo/tag\").reply(config => {\n  const response = TodoDB.tag;\n  return [200, response];\n});\nMock.onGet(\"/api/todo\").reply(config => {\n  const id = parseInt(config.data);\n  const response = TodoDB.todo.find(todo => todo.id === id);\n  return [200, response];\n});\nMock.onPost(\"/api/todo/reorder\").reply(config => {\n  let _JSON$parse = JSON.parse(config.data),\n      todoList = _JSON$parse.todoList;\n\n  TodoDB.todo = [...todoList];\n  let response = TodoDB.todo;\n  return [200, response];\n});\nMock.onPost(\"/api/todo/add\").reply(config => {\n  let _JSON$parse2 = JSON.parse(config.data),\n      todo = _JSON$parse2.todo;\n\n  TodoDB.todo.push(_objectSpread({}, todo));\n  let response = TodoDB.todo;\n  return [200, response];\n});\nMock.onPost(\"/api/todo/tag/add\").reply(config => {\n  let _JSON$parse3 = JSON.parse(config.data),\n      tag = _JSON$parse3.tag;\n\n  TodoDB.tag.push(_objectSpread({}, tag));\n  let response = TodoDB.tag;\n  return [200, response];\n});\nMock.onPost(\"/api/todo/update\").reply(config => {\n  let _JSON$parse4 = JSON.parse(config.data),\n      todo = _JSON$parse4.todo;\n\n  TodoDB.todo.map((t, index) => {\n    if (t.id === todo.id) {\n      TodoDB.todo[index] = _objectSpread({}, todo);\n    }\n\n    return \"dummy value\";\n  });\n  let response = TodoDB.todo;\n  return [200, response];\n});\nMock.onPost(\"/api/todo/delete\").reply(config => {\n  let _JSON$parse5 = JSON.parse(config.data),\n      todo = _JSON$parse5.todo;\n\n  _.remove(TodoDB.todo, t => t.id === todo.id);\n\n  let response = TodoDB.todo;\n  return [200, response];\n});\nMock.onPost(\"/api/todo/tag/delete\").reply(config => {\n  let _JSON$parse6 = JSON.parse(config.data),\n      tag = _JSON$parse6.tag;\n\n  _.remove(TodoDB.tag, t => t.id === tag.id);\n\n  let response = TodoDB.tag;\n  return [200, response];\n}); // Mock.onPost(\"/api/chat/create-chat-room\").reply(config => {\n//   let data = JSON.parse(config.data);\n//   let { id, chatId, ...rest } = data;\n//   ChatDB.user.map(user => {\n//     if (id === user.id) {\n//       user.chatInfo.push({ chatId, ...rest });\n//     }\n//   });\n//   ChatDB.chatCollection.push({\n//     id: chatId,\n//     chats: []\n//   });\n//   let temp;\n//   let response = ChatDB.user\n//     .find(user => user.id === id)\n//     .chatInfo.map(contact => {\n//       temp = ChatDB.contacts.find(user => user.id === contact.contactId);\n//       return { ...temp, ...contact };\n//     });\n//   response = _.orderBy(response, [\"lastChatTime\"], [\"desc\"]);\n//   console.log(response);\n//   return [200, response];\n// });","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/fake-db/db/todos.js"],"names":["Mock","_","TodoDB","todo","id","title","note","important","starred","done","read","selected","startDate","Date","toISOString","dueDate","tag","name","onGet","reply","config","response","parseInt","data","find","onPost","JSON","parse","todoList","push","map","t","index","remove"],"mappings":"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","sourcesContent":["import Mock from \"../mock\";\nimport * as _ from \"lodash\";\n\nconst TodoDB = {\n  todo: [\n    {\n      id: 1,\n      title: \"API problem\",\n      note: \"API is malfunctioning. kindly fix it\",\n      important: true,\n      starred: true,\n      done: false,\n      read: false,\n      selected: false,\n      startDate: new Date().toISOString(),\n      dueDate: new Date().toISOString(),\n\n      tag: [1, 2]\n    },\n    {\n      id: 2,\n      title: \"Mobile problem\",\n      note: \"Mobile is malfunctioning. fix it\",\n      important: false,\n      starred: false,\n      done: true,\n      read: true,\n      selected: false,\n      startDate: new Date().toISOString(),\n      dueDate: new Date().toISOString(),\n\n      tag: [2]\n    },\n    {\n      id: 3,\n      title: \"API problem\",\n      note: \"API is malfunctioning. fix it\",\n      important: false,\n      starred: false,\n      done: true,\n      read: false,\n      selected: false,\n      startDate: new Date().toISOString(),\n      dueDate: new Date().toISOString(),\n\n      tag: [1]\n    },\n    {\n      id: 4,\n      title: \"API problem\",\n      note: \"API is malfunctioning. fix it\",\n      important: false,\n      starred: false,\n      done: false,\n      read: true,\n      selected: false,\n      startDate: new Date().toISOString(),\n      dueDate: new Date().toISOString(),\n\n      tag: [1, 2, 3]\n    },\n    {\n      id: 5,\n      title: \"API problem\",\n      note: \"API is malfunctioning. fix it\",\n      important: false,\n      starred: false,\n      done: true,\n      read: false,\n      selected: false,\n      startDate: new Date().toISOString(),\n      dueDate: new Date().toISOString(),\n\n      tag: [1]\n    }\n  ],\n\n  tag: [\n    {\n      id: 1,\n      name: \"frontend\"\n    },\n    {\n      id: 2,\n      name: \"backend\"\n    },\n    {\n      id: 3,\n      name: \"API\"\n    },\n    {\n      id: 4,\n      name: \"issue\"\n    },\n    {\n      id: 5,\n      name: \"mobile\"\n    }\n  ]\n};\n\nMock.onGet(\"/api/todo/all\").reply(config => {\n  const response = TodoDB.todo;\n  return [200, response];\n});\n\nMock.onGet(\"/api/todo/tag\").reply(config => {\n  const response = TodoDB.tag;\n  return [200, response];\n});\n\nMock.onGet(\"/api/todo\").reply(config => {\n  const id = parseInt(config.data);\n\n  const response = TodoDB.todo.find(todo => todo.id === id);\n  return [200, response];\n});\n\nMock.onPost(\"/api/todo/reorder\").reply(config => {\n  let { todoList } = JSON.parse(config.data);\n\n  TodoDB.todo = [...todoList];\n  let response = TodoDB.todo;\n  return [200, response];\n});\n\nMock.onPost(\"/api/todo/add\").reply(config => {\n  let { todo } = JSON.parse(config.data);\n  TodoDB.todo.push({ ...todo });\n  let response = TodoDB.todo;\n  return [200, response];\n});\n\nMock.onPost(\"/api/todo/tag/add\").reply(config => {\n  let { tag } = JSON.parse(config.data);\n  TodoDB.tag.push({ ...tag });\n  let response = TodoDB.tag;\n  return [200, response];\n});\n\nMock.onPost(\"/api/todo/update\").reply(config => {\n  let { todo } = JSON.parse(config.data);\n\n  TodoDB.todo.map((t, index) => {\n    if (t.id === todo.id) {\n      TodoDB.todo[index] = { ...todo };\n    }\n    return \"dummy value\";\n  });\n\n  let response = TodoDB.todo;\n  return [200, response];\n});\n\nMock.onPost(\"/api/todo/delete\").reply(config => {\n  let { todo } = JSON.parse(config.data);\n  _.remove(TodoDB.todo, t => t.id === todo.id);\n  let response = TodoDB.todo;\n  return [200, response];\n});\n\nMock.onPost(\"/api/todo/tag/delete\").reply(config => {\n  let { tag } = JSON.parse(config.data);\n  _.remove(TodoDB.tag, t => t.id === tag.id);\n  let response = TodoDB.tag;\n  return [200, response];\n});\n\n// Mock.onPost(\"/api/chat/create-chat-room\").reply(config => {\n//   let data = JSON.parse(config.data);\n//   let { id, chatId, ...rest } = data;\n//   ChatDB.user.map(user => {\n//     if (id === user.id) {\n//       user.chatInfo.push({ chatId, ...rest });\n//     }\n//   });\n//   ChatDB.chatCollection.push({\n//     id: chatId,\n//     chats: []\n//   });\n\n//   let temp;\n//   let response = ChatDB.user\n//     .find(user => user.id === id)\n//     .chatInfo.map(contact => {\n//       temp = ChatDB.contacts.find(user => user.id === contact.contactId);\n//       return { ...temp, ...contact };\n//     });\n//   response = _.orderBy(response, [\"lastChatTime\"], [\"desc\"]);\n//   console.log(response);\n\n//   return [200, response];\n// });\n"]},"metadata":{},"sourceType":"module"}