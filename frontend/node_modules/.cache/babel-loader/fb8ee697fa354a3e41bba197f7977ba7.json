{"ast":null,"code":"import _objectSpread from \"/home/giriprasath/Downloads/matx-react/matx-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/giriprasath/Downloads/matx-react/matx-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/giriprasath/Downloads/matx-react/matx-react/src/app/views/Drag&Drop/SimpleHorizontalList.jsx\";\nimport React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // fake data generator\n\nconst getItems = count => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: \"item-\".concat(k),\n  content: \"item \".concat(k)\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n\n  const _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: \"0 \".concat(grid, \"px 0 0\"),\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\"\n}, draggableStyle);\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\"\n});\n\nclass SimpleHorizontalList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(this.state.items, result.source.index, result.destination.index);\n    this.setState({\n      items\n    });\n  } // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      direction: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver)\n    }, provided.droppableProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), this.state.items.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }), item.content))), provided.placeholder)));\n  }\n\n}\n\nexport default SimpleHorizontalList;","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/app/views/Drag&Drop/SimpleHorizontalList.jsx"],"names":["React","Component","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","display","overflow","SimpleHorizontalList","constructor","props","state","items","onDragEnd","bind","destination","source","index","setState","render","provided","snapshot","innerRef","droppableProps","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD,C,CAEA;;AACA,MAAMC,QAAQ,GAAGC,KAAK,IACpBC,KAAK,CAACC,IAAN,CAAW;AAAEC,EAAAA,MAAM,EAAEH;AAAV,CAAX,EAA8B,CAACI,CAAD,EAAIC,CAAJ,KAAUA,CAAxC,EAA2CC,GAA3C,CAA+CD,CAAC,KAAK;AACnDE,EAAAA,EAAE,iBAAUF,CAAV,CADiD;AAEnDG,EAAAA,OAAO,iBAAUH,CAAV;AAF4C,CAAL,CAAhD,CADF,C,CAMA;;;AACA,MAAMI,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC9C,QAAMC,MAAM,GAAGZ,KAAK,CAACC,IAAN,CAAWQ,IAAX,CAAf;;AAD8C,yBAE5BG,MAAM,CAACC,MAAP,CAAcH,UAAd,EAA0B,CAA1B,CAF4B;AAAA;AAAA,QAEvCI,OAFuC;;AAG9CF,EAAAA,MAAM,CAACC,MAAP,CAAcF,QAAd,EAAwB,CAAxB,EAA2BG,OAA3B;AAEA,SAAOF,MAAP;AACD,CAND;;AAQA,MAAMG,IAAI,GAAG,CAAb;;AAEA,MAAMC,YAAY,GAAG,CAACC,UAAD,EAAaC,cAAb;AACnB;AACAC,EAAAA,UAAU,EAAE,MAFO;AAGnBC,EAAAA,OAAO,EAAEL,IAAI,GAAG,CAHG;AAInBM,EAAAA,MAAM,cAAON,IAAP,WAJa;AAMnB;AACAO,EAAAA,UAAU,EAAEL,UAAU,GAAG,YAAH,GAAkB;AAPrB,GAUhBC,cAVgB,CAArB;;AAaA,MAAMK,YAAY,GAAGC,cAAc,KAAK;AACtCF,EAAAA,UAAU,EAAEE,cAAc,GAAG,WAAH,GAAiB,WADL;AAEtCC,EAAAA,OAAO,EAAE,MAF6B;AAGtCL,EAAAA,OAAO,EAAEL,IAH6B;AAItCW,EAAAA,QAAQ,EAAE;AAJ4B,CAAL,CAAnC;;AAOA,MAAMC,oBAAN,SAAmCjC,SAAnC,CAA6C;AAC3CkC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEjC,QAAQ,CAAC,CAAD;AADJ,KAAb;AAGA,SAAKkC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAEDD,EAAAA,SAAS,CAACpB,MAAD,EAAS;AAChB;AACA,QAAI,CAACA,MAAM,CAACsB,WAAZ,EAAyB;AACvB;AACD;;AAED,UAAMH,KAAK,GAAGvB,OAAO,CACnB,KAAKsB,KAAL,CAAWC,KADQ,EAEnBnB,MAAM,CAACuB,MAAP,CAAcC,KAFK,EAGnBxB,MAAM,CAACsB,WAAP,CAAmBE,KAHA,CAArB;AAMA,SAAKC,QAAL,CAAc;AACZN,MAAAA;AADY,KAAd;AAGD,GAxB0C,CA0B3C;AACA;;;AACAO,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKN,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,WAAW,EAAC,WAAvB;AAAmC,MAAA,SAAS,EAAC,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACO,QAAD,EAAWC,QAAX,kBACC;AACE,MAAA,GAAG,EAAED,QAAQ,CAACE,QADhB;AAEE,MAAA,KAAK,EAAElB,YAAY,CAACiB,QAAQ,CAAChB,cAAV;AAFrB,OAGMe,QAAQ,CAACG,cAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKG,KAAKZ,KAAL,CAAWC,KAAX,CAAiB1B,GAAjB,CAAqB,CAACsC,IAAD,EAAOP,KAAP,kBACpB,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAEO,IAAI,CAACrC,EAArB;AAAyB,MAAA,WAAW,EAAEqC,IAAI,CAACrC,EAA3C;AAA+C,MAAA,KAAK,EAAE8B,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACG,QAAD,EAAWC,QAAX,kBACC;AACE,MAAA,GAAG,EAAED,QAAQ,CAACE;AADhB,OAEMF,QAAQ,CAACK,cAFf,EAGML,QAAQ,CAACM,eAHf;AAIE,MAAA,KAAK,EAAE7B,YAAY,CACjBwB,QAAQ,CAACvB,UADQ,EAEjBsB,QAAQ,CAACK,cAAT,CAAwBE,KAFP,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASGH,IAAI,CAACpC,OATR,CAFJ,CADD,CALH,EAsBGgC,QAAQ,CAACQ,WAtBZ,CAFJ,CADF,CADF;AAgCD;;AA7D0C;;AAgE7C,eAAepB,oBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 ${grid}px 0 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\"\n});\n\nclass SimpleHorizontalList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleHorizontalList;\n"]},"metadata":{},"sourceType":"module"}