{"ast":null,"code":"var _jsxFileName = \"/home/giriprasath/Downloads/matx-react/matx-react/src/app/auth/AuthGuard.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\n\nclass AuthGuard extends Component {\n  constructor(props, context) {\n    super(props);\n    let routes = context.routes;\n    this.state = {\n      authenticated: false,\n      routes\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.authenticated !== this.state.authenticated;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const location = props.location,\n          user = props.user;\n    const pathname = location.pathname;\n    const matched = state.routes.find(r => r.path === pathname);\n    const authenticated = matched && matched.auth && matched.auth.length ? matched.auth.includes(user.role) : true;\n    return {\n      authenticated\n    };\n  }\n\n  redirectRoute(props) {\n    const location = props.location,\n          history = props.history;\n    const pathname = location.pathname;\n    history.push({\n      pathname: \"/session/signin\",\n      state: {\n        redirectUrl: pathname\n      }\n    });\n  }\n\n  render() {\n    let children = this.props.children;\n    const authenticated = this.state.authenticated;\n    return authenticated ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 28\n      }\n    }, children) : null;\n  }\n\n}\n\nAuthGuard.contextType = AppContext;\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default withRouter(connect(mapStateToProps)(AuthGuard));","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/app/auth/AuthGuard.jsx"],"names":["React","Component","Fragment","withRouter","connect","AppContext","AuthGuard","constructor","props","context","routes","state","authenticated","componentDidMount","redirectRoute","componentDidUpdate","shouldComponentUpdate","nextProps","nextState","getDerivedStateFromProps","location","user","pathname","matched","find","r","path","auth","length","includes","role","history","push","redirectUrl","render","children","contextType","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAChCM,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN;AAD0B,QAEpBE,MAFoB,GAETD,OAFS,CAEpBC,MAFoB;AAI1B,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,KADJ;AAEXF,MAAAA;AAFW,KAAb;AAID;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAKF,KAAL,CAAWC,aAAhB,EAA+B;AAC7B,WAAKE,aAAL,CAAmB,KAAKN,KAAxB;AACD;AACF;;AAEDO,EAAAA,kBAAkB,GAAG;AACnB,QAAI,CAAC,KAAKJ,KAAL,CAAWC,aAAhB,EAA+B;AAC7B,WAAKE,aAAL,CAAmB,KAAKN,KAAxB;AACD;AACF;;AAEDQ,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C,WAAOA,SAAS,CAACN,aAAV,KAA4B,KAAKD,KAAL,CAAWC,aAA9C;AACD;;AAED,SAAOO,wBAAP,CAAgCX,KAAhC,EAAuCG,KAAvC,EAA8C;AAAA,UACpCS,QADoC,GACjBZ,KADiB,CACpCY,QADoC;AAAA,UAC1BC,IAD0B,GACjBb,KADiB,CAC1Ba,IAD0B;AAAA,UAEpCC,QAFoC,GAEvBF,QAFuB,CAEpCE,QAFoC;AAG5C,UAAMC,OAAO,GAAGZ,KAAK,CAACD,MAAN,CAAac,IAAb,CAAkBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWJ,QAAlC,CAAhB;AACA,UAAMV,aAAa,GACjBW,OAAO,IAAIA,OAAO,CAACI,IAAnB,IAA2BJ,OAAO,CAACI,IAAR,CAAaC,MAAxC,GACIL,OAAO,CAACI,IAAR,CAAaE,QAAb,CAAsBR,IAAI,CAACS,IAA3B,CADJ,GAEI,IAHN;AAKA,WAAO;AACLlB,MAAAA;AADK,KAAP;AAGD;;AAEDE,EAAAA,aAAa,CAACN,KAAD,EAAQ;AAAA,UACXY,QADW,GACWZ,KADX,CACXY,QADW;AAAA,UACDW,OADC,GACWvB,KADX,CACDuB,OADC;AAAA,UAEXT,QAFW,GAEEF,QAFF,CAEXE,QAFW;AAInBS,IAAAA,OAAO,CAACC,IAAR,CAAa;AACXV,MAAAA,QAAQ,EAAE,iBADC;AAEXX,MAAAA,KAAK,EAAE;AAAEsB,QAAAA,WAAW,EAAEX;AAAf;AAFI,KAAb;AAID;;AAEDY,EAAAA,MAAM,GAAG;AAAA,QACDC,QADC,GACY,KAAK3B,KADjB,CACD2B,QADC;AAAA,UAECvB,aAFD,GAEmB,KAAKD,KAFxB,CAECC,aAFD;AAGP,WAAOA,aAAa,gBAAG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWuB,QAAX,CAAH,GAAqC,IAAzD;AACD;;AAvD+B;;AA0DlC7B,SAAS,CAAC8B,WAAV,GAAwB/B,UAAxB;;AAEA,MAAMgC,eAAe,GAAG1B,KAAK,KAAK;AAChCU,EAAAA,IAAI,EAAEV,KAAK,CAACU;AADoB,CAAL,CAA7B;;AAIA,eAAelB,UAAU,CAACC,OAAO,CAACiC,eAAD,CAAP,CAAyB/B,SAAzB,CAAD,CAAzB","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\n\nclass AuthGuard extends Component {\n  constructor(props, context) {\n    super(props);\n    let { routes } = context;\n\n    this.state = {\n      authenticated: false,\n      routes\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.authenticated !== this.state.authenticated;\n  }\n\n  static getDerivedStateFromProps(props, state) {    \n    const { location, user } = props;\n    const { pathname } = location;\n    const matched = state.routes.find(r => r.path === pathname);\n    const authenticated =\n      matched && matched.auth && matched.auth.length\n        ? matched.auth.includes(user.role)\n        : true;\n\n    return {\n      authenticated\n    };\n  }\n\n  redirectRoute(props) {\n    const { location, history } = props;\n    const { pathname } = location;\n\n    history.push({\n      pathname: \"/session/signin\",\n      state: { redirectUrl: pathname }\n    });\n  }\n\n  render() {\n    let { children } = this.props;\n    const { authenticated } = this.state;\n    return authenticated ? <Fragment>{children}</Fragment> : null;\n  }\n}\n\nAuthGuard.contextType = AppContext;\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default withRouter(connect(mapStateToProps)(AuthGuard));\n"]},"metadata":{},"sourceType":"module"}