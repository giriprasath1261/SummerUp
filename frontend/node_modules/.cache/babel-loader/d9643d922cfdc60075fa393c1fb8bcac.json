{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransitionStyles = exports.styles = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _green = require('@material-ui/core/colors/green');\n\nvar _green2 = _interopRequireDefault(_green);\n\nvar _amber = require('@material-ui/core/colors/amber');\n\nvar _amber2 = _interopRequireDefault(_amber);\n\nvar _SnackbarItem = require('./SnackbarItem.util');\n\nvar _constants = require('../utils/constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar styles = exports.styles = function styles(theme) {\n  return _extends({}, _SnackbarItem.muiClasses, {\n    base: {\n      fontSize: '0.875rem',\n      lineHeight: '1.46429em',\n      fontWeight: theme.typography.fontWeightRegular,\n      fontFamily: theme.typography.fontFamily\n    },\n    lessPadding: {\n      paddingLeft: 8 * 2.5\n    },\n    variantSuccess: {\n      backgroundColor: _green2.default[600]\n    },\n    variantError: {\n      backgroundColor: theme.palette.error.dark\n    },\n    variantInfo: {\n      backgroundColor: '#2979ff' // nice blue\n\n    },\n    variantWarning: {\n      backgroundColor: _amber2.default[700]\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  });\n};\n/**\n * @param {object} anchorOrigin - how snack is postioned. e.g.\n * { vertical: 'bottom', horizontal: 'left' }\n * @param {number} level - Level on which snakcbar should be displayed\n * (when snackbars are stacked on top of eachother)\n * @returns {object}\n */\n\n\nvar getTransitionStyles = exports.getTransitionStyles = function getTransitionStyles(offset, anchorOrigin) {\n  return Object.assign(_defineProperty({}, anchorOrigin.vertical, offset), {\n    WebKitTransition: 'all ' + _constants.TRANSITION_DOWN_DURATION + 'ms',\n    MozTransition: 'all ' + _constants.TRANSITION_DOWN_DURATION + 'ms',\n    msTransition: 'all ' + _constants.TRANSITION_DOWN_DURATION + 'ms',\n    OTransition: 'all ' + _constants.TRANSITION_DOWN_DURATION + 'ms',\n    transition: 'all ' + _constants.TRANSITION_DOWN_DURATION + 'ms',\n    transitionDelay: _constants.TRANSITION_DELAY + 'ms'\n  });\n};","map":null,"metadata":{},"sourceType":"script"}