{"ast":null,"code":"var _jsxFileName = \"/home/giriprasath/Downloads/matx-react/matx-react/src/app/MatxLayout/MatxLayout.jsx\";\nimport React, { Component } from \"react\";\nimport { MatxLayouts } from \"./index\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport { setLayoutSettings, setDefaultSettings } from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen, getQueryParam } from \"utils\";\n\nclass MatxLayout extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.setLayoutFromQuery = () => {\n      try {\n        let settingsFromQuery = getQueryParam(\"settings\");\n        settingsFromQuery = settingsFromQuery ? JSON.parse(settingsFromQuery) : {};\n        let _this$props = this.props,\n            settings = _this$props.settings,\n            setLayoutSettings = _this$props.setLayoutSettings,\n            setDefaultSettings = _this$props.setDefaultSettings;\n        let updatedSettings = merge({}, settings, settingsFromQuery);\n        setLayoutSettings(updatedSettings);\n        setDefaultSettings(updatedSettings);\n      } catch (e) {// console.log(\"Error! Set settings from query param\", e);\n      }\n    };\n\n    this.listenWindowResize = () => {\n      let _this$props2 = this.props,\n          settings = _this$props2.settings,\n          setLayoutSettings = _this$props2.setLayoutSettings;\n\n      if (settings.layout1Settings.leftSidebar.show) {\n        let mode = isMdScreen() ? \"close\" : \"full\";\n        setLayoutSettings(merge({}, settings, {\n          layout1Settings: {\n            leftSidebar: {\n              mode\n            }\n          }\n        }));\n      }\n    };\n\n    this.appContext = context;\n    this.updateSettingsFromRouter(); // Set settings from query (Only for demo purpose)\n\n    this.setLayoutFromQuery();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.updateSettingsFromRouter();\n    }\n  }\n\n  componentWillMount() {\n    if (window) {\n      // LISTEN WINDOW RESIZE\n      window.addEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  componentWillUnmount() {\n    if (window) {\n      window.removeEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  updateSettingsFromRouter() {\n    const routes = this.appContext.routes;\n    const matched = matchRoutes(routes, this.props.location.pathname)[0];\n    let _this$props3 = this.props,\n        defaultSettings = _this$props3.defaultSettings,\n        settings = _this$props3.settings,\n        setLayoutSettings = _this$props3.setLayoutSettings;\n\n    if (matched && matched.route.settings) {\n      // ROUTE HAS SETTINGS\n      const updatedSettings = merge({}, settings, matched.route.settings);\n\n      if (!isEqual(settings, updatedSettings)) {\n        setLayoutSettings(updatedSettings); // console.log('Route has settings');\n      }\n    } else if (!isEqual(settings, defaultSettings)) {\n      setLayoutSettings(defaultSettings); // console.log('reset settings', defaultSettings);\n    }\n  }\n\n  render() {\n    const settings = this.props.settings;\n    const Layout = MatxLayouts[settings.activeLayout];\n    return /*#__PURE__*/React.createElement(Layout, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  defaultSettings: state.layout.defaultSettings\n});\n\nMatxLayout.contextType = AppContext;\nexport default withRouter(connect(mapStateToProps, {\n  setLayoutSettings,\n  setDefaultSettings\n})(MatxLayout));","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/app/MatxLayout/MatxLayout.jsx"],"names":["React","Component","MatxLayouts","PropTypes","withRouter","matchRoutes","connect","AppContext","setLayoutSettings","setDefaultSettings","isEqual","merge","isMdScreen","getQueryParam","MatxLayout","constructor","props","context","setLayoutFromQuery","settingsFromQuery","JSON","parse","settings","updatedSettings","e","listenWindowResize","layout1Settings","leftSidebar","show","mode","appContext","updateSettingsFromRouter","componentDidUpdate","prevProps","location","pathname","componentWillMount","window","addEventListener","componentWillUnmount","removeEventListener","routes","matched","defaultSettings","route","render","Layout","activeLayout","mapStateToProps","state","func","isRequired","layout","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SACEC,iBADF,EAEEC,kBAFF,QAGO,iCAHP;AAIA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,QAA/B;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,OAA1C;;AAEA,MAAMC,UAAN,SAAyBb,SAAzB,CAAmC;AACjCc,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN;;AAD0B,SA4B5BE,kBA5B4B,GA4BP,MAAM;AACzB,UAAI;AACF,YAAIC,iBAAiB,GAAGN,aAAa,CAAC,UAAD,CAArC;AACAM,QAAAA,iBAAiB,GAAGA,iBAAiB,GACjCC,IAAI,CAACC,KAAL,CAAWF,iBAAX,CADiC,GAEjC,EAFJ;AAFE,0BAKwD,KAAKH,KAL7D;AAAA,YAKIM,QALJ,eAKIA,QALJ;AAAA,YAKcd,iBALd,eAKcA,iBALd;AAAA,YAKiCC,kBALjC,eAKiCA,kBALjC;AAMF,YAAIc,eAAe,GAAGZ,KAAK,CAAC,EAAD,EAAKW,QAAL,EAAeH,iBAAf,CAA3B;AAEAX,QAAAA,iBAAiB,CAACe,eAAD,CAAjB;AACAd,QAAAA,kBAAkB,CAACc,eAAD,CAAlB;AACD,OAVD,CAUE,OAAOC,CAAP,EAAU,CACV;AACD;AACF,KA1C2B;;AAAA,SA4C5BC,kBA5C4B,GA4CP,MAAM;AAAA,yBACa,KAAKT,KADlB;AAAA,UACnBM,QADmB,gBACnBA,QADmB;AAAA,UACTd,iBADS,gBACTA,iBADS;;AAGzB,UAAIc,QAAQ,CAACI,eAAT,CAAyBC,WAAzB,CAAqCC,IAAzC,EAA+C;AAC7C,YAAIC,IAAI,GAAGjB,UAAU,KAAK,OAAL,GAAe,MAApC;AACAJ,QAAAA,iBAAiB,CACfG,KAAK,CAAC,EAAD,EAAKW,QAAL,EAAe;AAAEI,UAAAA,eAAe,EAAE;AAAEC,YAAAA,WAAW,EAAE;AAAEE,cAAAA;AAAF;AAAf;AAAnB,SAAf,CADU,CAAjB;AAGD;AACF,KArD2B;;AAE1B,SAAKC,UAAL,GAAkBb,OAAlB;AACA,SAAKc,wBAAL,GAH0B,CAK1B;;AACA,SAAKb,kBAAL;AACD;;AAEDc,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKjB,KAAL,CAAWkB,QAAX,CAAoBC,QAApB,KAAiCF,SAAS,CAACC,QAAV,CAAmBC,QAAxD,EAAkE;AAChE,WAAKJ,wBAAL;AACD;AACF;;AAEDK,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,MAAJ,EAAY;AACV;AACAA,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKb,kBAAvC;AACD;AACF;;AAEDc,EAAAA,oBAAoB,GAAG;AACrB,QAAIF,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKf,kBAA1C;AACD;AACF;;AA6BDM,EAAAA,wBAAwB,GAAG;AAAA,UACjBU,MADiB,GACN,KAAKX,UADC,CACjBW,MADiB;AAEzB,UAAMC,OAAO,GAAGrC,WAAW,CAACoC,MAAD,EAAS,KAAKzB,KAAL,CAAWkB,QAAX,CAAoBC,QAA7B,CAAX,CAAkD,CAAlD,CAAhB;AAFyB,uBAG8B,KAAKnB,KAHnC;AAAA,QAGnB2B,eAHmB,gBAGnBA,eAHmB;AAAA,QAGFrB,QAHE,gBAGFA,QAHE;AAAA,QAGQd,iBAHR,gBAGQA,iBAHR;;AAKzB,QAAIkC,OAAO,IAAIA,OAAO,CAACE,KAAR,CAActB,QAA7B,EAAuC;AACrC;AACA,YAAMC,eAAe,GAAGZ,KAAK,CAAC,EAAD,EAAKW,QAAL,EAAeoB,OAAO,CAACE,KAAR,CAActB,QAA7B,CAA7B;;AACA,UAAI,CAACZ,OAAO,CAACY,QAAD,EAAWC,eAAX,CAAZ,EAAyC;AACvCf,QAAAA,iBAAiB,CAACe,eAAD,CAAjB,CADuC,CAEvC;AACD;AACF,KAPD,MAOO,IAAI,CAACb,OAAO,CAACY,QAAD,EAAWqB,eAAX,CAAZ,EAAyC;AAC9CnC,MAAAA,iBAAiB,CAACmC,eAAD,CAAjB,CAD8C,CAE9C;AACD;AACF;;AAEDE,EAAAA,MAAM,GAAG;AAAA,UACCvB,QADD,GACc,KAAKN,KADnB,CACCM,QADD;AAEP,UAAMwB,MAAM,GAAG5C,WAAW,CAACoB,QAAQ,CAACyB,YAAV,CAA1B;AAEA,wBAAO,oBAAC,MAAD,oBAAY,KAAK/B,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AA/EgC;;AAkFnC,MAAMgC,eAAe,GAAGC,KAAK,KAAK;AAChCzC,EAAAA,iBAAiB,EAAEL,SAAS,CAAC+C,IAAV,CAAeC,UADF;AAEhC1C,EAAAA,kBAAkB,EAAEN,SAAS,CAAC+C,IAAV,CAAeC,UAFH;AAGhC7B,EAAAA,QAAQ,EAAE2B,KAAK,CAACG,MAAN,CAAa9B,QAHS;AAIhCqB,EAAAA,eAAe,EAAEM,KAAK,CAACG,MAAN,CAAaT;AAJE,CAAL,CAA7B;;AAOA7B,UAAU,CAACuC,WAAX,GAAyB9C,UAAzB;AAEA,eAAeH,UAAU,CACvBE,OAAO,CACL0C,eADK,EAEL;AAAExC,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAFK,CAAP,CAGEK,UAHF,CADuB,CAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport { MatxLayouts } from \"./index\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen, getQueryParam } from \"utils\";\n\nclass MatxLayout extends Component {\n  constructor(props, context) {\n    super(props);\n    this.appContext = context;\n    this.updateSettingsFromRouter();\n\n    // Set settings from query (Only for demo purpose)\n    this.setLayoutFromQuery();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.updateSettingsFromRouter();\n    }\n  }\n\n  componentWillMount() {\n    if (window) {\n      // LISTEN WINDOW RESIZE\n      window.addEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  componentWillUnmount() {\n    if (window) {\n      window.removeEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  setLayoutFromQuery = () => {\n    try {\n      let settingsFromQuery = getQueryParam(\"settings\");\n      settingsFromQuery = settingsFromQuery\n        ? JSON.parse(settingsFromQuery)\n        : {};\n      let { settings, setLayoutSettings, setDefaultSettings } = this.props;\n      let updatedSettings = merge({}, settings, settingsFromQuery);\n\n      setLayoutSettings(updatedSettings);\n      setDefaultSettings(updatedSettings);\n    } catch (e) {\n      // console.log(\"Error! Set settings from query param\", e);\n    }\n  };\n\n  listenWindowResize = () => {\n    let { settings, setLayoutSettings } = this.props;\n\n    if (settings.layout1Settings.leftSidebar.show) {\n      let mode = isMdScreen() ? \"close\" : \"full\";\n      setLayoutSettings(\n        merge({}, settings, { layout1Settings: { leftSidebar: { mode } } })\n      );\n    }\n  };\n\n  updateSettingsFromRouter() {\n    const { routes } = this.appContext;\n    const matched = matchRoutes(routes, this.props.location.pathname)[0];\n    let { defaultSettings, settings, setLayoutSettings } = this.props;\n\n    if (matched && matched.route.settings) {\n      // ROUTE HAS SETTINGS\n      const updatedSettings = merge({}, settings, matched.route.settings);\n      if (!isEqual(settings, updatedSettings)) {\n        setLayoutSettings(updatedSettings);\n        // console.log('Route has settings');\n      }\n    } else if (!isEqual(settings, defaultSettings)) {\n      setLayoutSettings(defaultSettings);\n      // console.log('reset settings', defaultSettings);\n    }\n  }\n\n  render() {\n    const { settings } = this.props;\n    const Layout = MatxLayouts[settings.activeLayout];\n\n    return <Layout {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  defaultSettings: state.layout.defaultSettings\n});\n\nMatxLayout.contextType = AppContext;\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    { setLayoutSettings, setDefaultSettings }\n  )(MatxLayout)\n);\n"]},"metadata":{},"sourceType":"module"}