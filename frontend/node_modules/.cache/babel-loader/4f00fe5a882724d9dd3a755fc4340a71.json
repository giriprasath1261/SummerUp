{"ast":null,"code":"var _jsxFileName = \"/home/giriprasath/Downloads/matx-react/matx-react/src/app/auth/Auth.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport { setUserData } from \"../redux/actions/UserActions\";\nimport jwtAuthService from \"../services/jwtAuthService\";\nimport localStorageService from \"../services/localStorageService\";\nimport firebaseAuthService from \"../services/firebase/firebaseAuthService\";\nimport history from \"history.js\";\n\nclass Auth extends Component {\n  constructor(props) {\n    super(props); // Set user if exists in local storage\n    // This is only for demo purpose\n    // You should remove this\n\n    this.state = {};\n\n    this.checkJwtAuth = () => {\n      // You need to send token to your server to check token is valid\n      // modify loginWithToken method in jwtService\n      jwtAuthService.loginWithToken().then(user => {\n        // Valid token\n        // Set user\n        this.props.setUserData(user); // You should redirect user to Dashboard here\n      }).catch(err => {\n        // Invalid token\n        // Ridirect user to sign in page here\n        console.log(err);\n        history.push({\n          pathname: \"/session/signin\"\n        });\n      });\n    };\n\n    this.checkFirebaseAuth = () => {\n      firebaseAuthService.checkAuthStatus(user => {\n        if (user) {\n          console.log(user.uid);\n          console.log(user.email);\n          console.log(user.emailVerified);\n        } else {\n          console.log(\"not logged in\");\n        }\n      });\n    };\n\n    this.props.setUserData(localStorageService.getItem(\"auth_user\")); // Check current token is valid on page load/reload\n\n    this.checkJwtAuth(); // this.checkFirebaseAuth();\n  }\n\n  render() {\n    const children = this.props.children;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 12\n      }\n    }, children);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  setUserData: PropTypes.func.isRequired,\n  login: state.login\n});\n\nexport default connect(mapStateToProps, {\n  setUserData\n})(Auth);","map":{"version":3,"sources":["/home/giriprasath/Downloads/matx-react/matx-react/src/app/auth/Auth.jsx"],"names":["React","Component","Fragment","connect","PropTypes","setUserData","jwtAuthService","localStorageService","firebaseAuthService","history","Auth","constructor","props","state","checkJwtAuth","loginWithToken","then","user","catch","err","console","log","push","pathname","checkFirebaseAuth","checkAuthStatus","uid","email","emailVerified","getItem","render","children","mapStateToProps","func","isRequired","login"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,mBAAP,MAAgC,0CAAhC;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AAG3BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;AACA;AACA;;AALiB,SAFnBC,KAEmB,GAFX,EAEW;;AAAA,SAcnBC,YAdmB,GAcJ,MAAM;AACnB;AACA;AACAR,MAAAA,cAAc,CAACS,cAAf,GAAgCC,IAAhC,CAAqCC,IAAI,IAAI;AAE3C;AACA;AACA,aAAKL,KAAL,CAAWP,WAAX,CAAuBY,IAAvB,EAJ2C,CAM3C;AAED,OARD,EAQGC,KARH,CAQSC,GAAG,IAAI;AACd;AACA;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAV,QAAAA,OAAO,CAACa,IAAR,CAAa;AACXC,UAAAA,QAAQ,EAAE;AADC,SAAb;AAGD,OAfD;AAgBD,KAjCkB;;AAAA,SAmCnBC,iBAnCmB,GAmCC,MAAM;AACxBhB,MAAAA,mBAAmB,CAACiB,eAApB,CAAoCR,IAAI,IAAI;AAC1C,YAAIA,IAAJ,EAAU;AACRG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACS,GAAjB;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACU,KAAjB;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACW,aAAjB;AACD,SAJD,MAIO;AACLR,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;AACF,OARD;AASD,KA7CkB;;AAMjB,SAAKT,KAAL,CAAWP,WAAX,CAAuBE,mBAAmB,CAACsB,OAApB,CAA4B,WAA5B,CAAvB,EANiB,CAQjB;;AACA,SAAKf,YAAL,GATiB,CAWjB;AACD;;AAmCDgB,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAKnB,KADnB,CACCmB,QADD;AAEP,wBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWA,QAAX,CAAP;AACD;;AArD0B;;AAwD7B,MAAMC,eAAe,GAAGnB,KAAK,KAAK;AAChCR,EAAAA,WAAW,EAAED,SAAS,CAAC6B,IAAV,CAAeC,UADI;AAEhCC,EAAAA,KAAK,EAAEtB,KAAK,CAACsB;AAFmB,CAAL,CAA7B;;AAKA,eAAehC,OAAO,CACpB6B,eADoB,EAEpB;AAAE3B,EAAAA;AAAF,CAFoB,CAAP,CAGbK,IAHa,CAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport { setUserData } from \"../redux/actions/UserActions\";\nimport jwtAuthService from \"../services/jwtAuthService\";\nimport localStorageService from \"../services/localStorageService\";\nimport firebaseAuthService from \"../services/firebase/firebaseAuthService\";\nimport history from \"history.js\";\n\nclass Auth extends Component {\n  state = {};\n  \n  constructor(props) {\n    super(props);\n\n    // Set user if exists in local storage\n    // This is only for demo purpose\n    // You should remove this\n    this.props.setUserData(localStorageService.getItem(\"auth_user\"));\n    \n    // Check current token is valid on page load/reload\n    this.checkJwtAuth();\n\n    // this.checkFirebaseAuth();\n  }\n\n  checkJwtAuth = () => {\n    // You need to send token to your server to check token is valid\n    // modify loginWithToken method in jwtService\n    jwtAuthService.loginWithToken().then(user => {\n\n      // Valid token\n      // Set user\n      this.props.setUserData(user);\n\n      // You should redirect user to Dashboard here\n      \n    }).catch(err => {\n      // Invalid token\n      // Ridirect user to sign in page here\n      console.log(err);\n      history.push({\n        pathname: \"/session/signin\"\n      });\n    });\n  };\n\n  checkFirebaseAuth = () => {\n    firebaseAuthService.checkAuthStatus(user => {\n      if (user) {\n        console.log(user.uid);\n        console.log(user.email);\n        console.log(user.emailVerified);\n      } else {\n        console.log(\"not logged in\");\n      }\n    });\n  };\n\n  render() {\n    const { children } = this.props;\n    return <Fragment>{children}</Fragment>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  setUserData: PropTypes.func.isRequired,\n  login: state.login\n});\n\nexport default connect(\n  mapStateToProps,\n  { setUserData }\n)(Auth);\n"]},"metadata":{},"sourceType":"module"}